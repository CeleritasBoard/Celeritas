
Prometheus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007230  08007230  00008230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  000090a0  2**0
                  CONTENTS
  4 .ARM          00000000  080072a0  080072a0  000090a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072a0  080072a0  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072a4  080072a4  000082a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080072a8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002620  200000a0  08007348  000090a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026c0  08007348  000096c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c425  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002892  00000000  00000000  000154f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00017d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fc  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a66  00000000  00000000  00019024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f690  00000000  00000000  0002ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e12  00000000  00000000  0003e11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bef2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb4  00000000  00000000  000bef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c1e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007214 	.word	0x08007214

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08007214 	.word	0x08007214

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <calculate_checksum>:
  *     Author: badam
  */

 #include "Checksum.h"

 uint8_t calculate_checksum(uint8_t item[], int length) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
     uint8_t checksum = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
     for (int i = 0; i < length; i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e009      	b.n	8000b08 <calculate_checksum+0x28>
         checksum += item[i];
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	4413      	add	r3, r2
 8000b00:	73fb      	strb	r3, [r7, #15]
     for (int i = 0; i < length; i++) {
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf1      	blt.n	8000af4 <calculate_checksum+0x14>
     }
     return checksum;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 }
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <max_hit_measurement>:

extern ADC_HandleTypeDef hadc1;

uint8_t sample_adc(uint8_t samples, uint16_t min_voltage, uint16_t max_voltage);

void max_hit_measurement(Request request){
 8000b20:	b084      	sub	sp, #16
 8000b22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b26:	b08b      	sub	sp, #44	@ 0x2c
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 8000b2e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000b32:	466b      	mov	r3, sp
 8000b34:	461e      	mov	r6, r3
	uint8_t resolution = request.resolution;
 8000b36:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b3a:	74bb      	strb	r3, [r7, #18]
	uint8_t measurementData[resolution];
 8000b3c:	7cb9      	ldrb	r1, [r7, #18]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	3b01      	subs	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	b2cb      	uxtb	r3, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	4698      	mov	r8, r3
 8000b4a:	4691      	mov	r9, r2
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b60:	b2cb      	uxtb	r3, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	461c      	mov	r4, r3
 8000b66:	4615      	mov	r5, r2
 8000b68:	f04f 0200 	mov.w	r2, #0
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	00eb      	lsls	r3, r5, #3
 8000b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b76:	00e2      	lsls	r2, r4, #3
 8000b78:	460b      	mov	r3, r1
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	ebad 0d03 	sub.w	sp, sp, r3
 8000b84:	ab04      	add	r3, sp, #16
 8000b86:	3300      	adds	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < resolution; i++) measurementData[i] = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e007      	b.n	8000ba0 <max_hit_measurement+0x80>
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4413      	add	r3, r2
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	7cbb      	ldrb	r3, [r7, #18]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf3      	blt.n	8000b90 <max_hit_measurement+0x70>
	uint8_t intervalLength = (request.max_voltage - request.min_voltage)/resolution;
 8000ba8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000bac:	461a      	mov	r2, r3
 8000bae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	7cbb      	ldrb	r3, [r7, #18]
 8000bb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bba:	71fb      	strb	r3, [r7, #7]
	uint8_t peaks = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	74fb      	strb	r3, [r7, #19]
	HAL_ADC_Start(&hadc1);
 8000bc0:	4849      	ldr	r0, [pc, #292]	@ (8000ce8 <max_hit_measurement+0x1c8>)
 8000bc2:	f001 fae3 	bl	800218c <HAL_ADC_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bce:	f002 fa61 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	4845      	ldr	r0, [pc, #276]	@ (8000cec <max_hit_measurement+0x1cc>)
 8000bd8:	f002 fa5c 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bdc:	2064      	movs	r0, #100	@ 0x64
 8000bde:	f001 f92b 	bl	8001e38 <HAL_Delay>
	while(peaks < request.limit){
 8000be2:	e02a      	b.n	8000c3a <max_hit_measurement+0x11a>
		uint8_t sample = sample_adc(request.samples, request.min_voltage, request.max_voltage);
 8000be4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000be8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8000bec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f87d 	bl	8000cf0 <sample_adc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71bb      	strb	r3, [r7, #6]
		uint8_t intervalIndex = abs(sample - request.min_voltage)/intervalLength;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000c00:	1a9b      	subs	r3, r3, r2
 8000c02:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c06:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c10:	717b      	strb	r3, [r7, #5]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, peaks % 2);
 8000c12:	7cfb      	ldrb	r3, [r7, #19]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2140      	movs	r1, #64	@ 0x40
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f002 fa37 	bl	8003094 <HAL_GPIO_WritePin>
		measurementData[intervalIndex]++;
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	5cd2      	ldrb	r2, [r2, r3]
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	b2d1      	uxtb	r1, r2
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	54d1      	strb	r1, [r2, r3]
		peaks++;
 8000c34:	7cfb      	ldrb	r3, [r7, #19]
 8000c36:	3301      	adds	r3, #1
 8000c38:	74fb      	strb	r3, [r7, #19]
	while(peaks < request.limit){
 8000c3a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c3e:	7cfa      	ldrb	r2, [r7, #19]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d3cf      	bcc.n	8000be4 <max_hit_measurement+0xc4>
	}


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2140      	movs	r1, #64	@ 0x40
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f002 fa22 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2180      	movs	r1, #128	@ 0x80
 8000c54:	4825      	ldr	r0, [pc, #148]	@ (8000cec <max_hit_measurement+0x1cc>)
 8000c56:	f002 fa1d 	bl	8003094 <HAL_GPIO_WritePin>
	if(request.is_header){
 8000c5a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d02f      	beq.n	8000cc2 <max_hit_measurement+0x1a2>
		if(request.is_priority){
 8000c62:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d015      	beq.n	8000c96 <max_hit_measurement+0x176>
			add_spectrum(request, &measurementData, resolution);
 8000c6a:	7cbb      	ldrb	r3, [r7, #18]
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7c:	f000 fbfc 	bl	8001478 <add_spectrum>
			add_header(request, request.limit);
 8000c80:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	f000 fb98 	bl	80013c4 <add_header>
 8000c94:	e020      	b.n	8000cd8 <max_hit_measurement+0x1b8>
		}
		else{
			add_header(request, request.limit);
 8000c96:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca6:	f000 fb8d 	bl	80013c4 <add_header>
			add_spectrum(request, &measurementData, resolution);
 8000caa:	7cbb      	ldrb	r3, [r7, #18]
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbc:	f000 fbdc 	bl	8001478 <add_spectrum>
 8000cc0:	e00a      	b.n	8000cd8 <max_hit_measurement+0x1b8>
		}
	}
	else{
		//send data with a given priority
		add_spectrum(request, &measurementData, resolution);
 8000cc2:	7cbb      	ldrb	r3, [r7, #18]
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd4:	f000 fbd0 	bl	8001478 <add_spectrum>
 8000cd8:	46b5      	mov	sp, r6
	}

}
 8000cda:	bf00      	nop
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr
 8000ce8:	200024e0 	.word	0x200024e0
 8000cec:	48000400 	.word	0x48000400

08000cf0 <sample_adc>:

uint8_t sample_adc(uint8_t samples, uint16_t min_voltage, uint16_t max_voltage){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	807b      	strh	r3, [r7, #2]
	uint32_t sum = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]

	while(1){
		sum = analogRead(); //measure ADC
 8000d06:	f000 f837 	bl	8000d78 <analogRead>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60fb      	str	r3, [r7, #12]
		if(!(sum > min_voltage && sum < max_voltage)) continue;
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d915      	bls.n	8000d42 <sample_adc+0x52>
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d211      	bcs.n	8000d42 <sample_adc+0x52>
		for(int i = 1; i < samples; i++){
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	e009      	b.n	8000d38 <sample_adc+0x48>
			sum += analogRead();
 8000d24:	f000 f828 	bl	8000d78 <analogRead>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
		for(int i = 1; i < samples; i++){
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <sample_adc+0x34>
		}
		break;
 8000d40:	e001      	b.n	8000d46 <sample_adc+0x56>
		if(!(sum > min_voltage && sum < max_voltage)) continue;
 8000d42:	bf00      	nop
	while(1){
 8000d44:	e7df      	b.n	8000d06 <sample_adc+0x16>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2120      	movs	r1, #32
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f002 f9a1 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 f870 	bl	8001e38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d60:	f002 f998 	bl	8003094 <HAL_GPIO_WritePin>
	return (uint8_t)(sum/samples);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	b2db      	uxtb	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <analogRead>:

int analogRead()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000d7c:	2164      	movs	r1, #100	@ 0x64
 8000d7e:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <analogRead+0x18>)
 8000d80:	f001 fa72 	bl	8002268 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1); // get the adc value
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <analogRead+0x18>)
 8000d86:	f001 fb2d 	bl	80023e4 <HAL_ADC_GetValue>
 8000d8a:	4603      	mov	r3, r0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200024e0 	.word	0x200024e0

08000d94 <find_insert_position>:
/** Finds the position to insert the new request based on its start time.
  * Starts at the head and goes until arriving at the tail. If head == tail (size == 0),
  * the index of the tail is returned.
  * @return The position to insert the new request
  */
static uint8_t find_insert_position(uint32_t time){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 	for (int i = head; i != tail; i++){
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <find_insert_position+0x50>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e011      	b.n	8000dc8 <find_insert_position+0x34>
 		if (request_queue[i].start_time>time){
 8000da4:	4910      	ldr	r1, [pc, #64]	@ (8000de8 <find_insert_position+0x54>)
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	3308      	adds	r3, #8
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d202      	bcs.n	8000dc2 <find_insert_position+0x2e>
 			return i;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	e00a      	b.n	8000dd8 <find_insert_position+0x44>
 	for (int i = head; i != tail; i++){
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <find_insert_position+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d1e7      	bne.n	8000da4 <find_insert_position+0x10>
 		}
 	}
 	return tail;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <find_insert_position+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 }
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	200014bc 	.word	0x200014bc
 8000de8:	200000bc 	.word	0x200000bc
 8000dec:	200014bd 	.word	0x200014bd

08000df0 <request_queue_put>:

/**
  * Puts a request into the request queue, sorted by start time.
  * If the queue is full, the request is discarded.
  */
void request_queue_put(Request request){
 8000df0:	b084      	sub	sp, #16
 8000df2:	b5b0      	push	{r4, r5, r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	f107 0418 	add.w	r4, r7, #24
 8000dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (size >= REQUEST_QUEUE_SIZE) return;

	uint8_t insert_pos = find_insert_position(request.start_time);
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffc6 	bl	8000d94 <find_insert_position>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	70fb      	strb	r3, [r7, #3]
	for (int i = size; i > insert_pos; i--){
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <request_queue_put+0xa8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e017      	b.n	8000e44 <request_queue_put+0x54>
		request_queue[i] = request_queue[i-1];
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	4820      	ldr	r0, [pc, #128]	@ (8000e9c <request_queue_put+0xac>)
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4418      	add	r0, r3
 8000e26:	491d      	ldr	r1, [pc, #116]	@ (8000e9c <request_queue_put+0xac>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	4604      	mov	r4, r0
 8000e34:	461d      	mov	r5, r3
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	6023      	str	r3, [r4, #0]
	for (int i = size; i > insert_pos; i--){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dce3      	bgt.n	8000e14 <request_queue_put+0x24>
	}
	request_queue[insert_pos] = request;
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	4913      	ldr	r1, [pc, #76]	@ (8000e9c <request_queue_put+0xac>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	461d      	mov	r5, r3
 8000e5c:	f107 0418 	add.w	r4, r7, #24
 8000e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	602b      	str	r3, [r5, #0]
	tail = (tail+1) % REQUEST_QUEUE_SIZE;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <request_queue_put+0xb0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	425a      	negs	r2, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	bf58      	it	pl
 8000e76:	4253      	negpl	r3, r2
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <request_queue_put+0xb0>)
 8000e7c:	701a      	strb	r2, [r3, #0]
	size++;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <request_queue_put+0xa8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <request_queue_put+0xa8>)
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e92:	b004      	add	sp, #16
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200014be 	.word	0x200014be
 8000e9c:	200000bc 	.word	0x200000bc
 8000ea0:	200014bd 	.word	0x200014bd

08000ea4 <request_queue_get>:
  * Returns the next request from the request queue, sorted by start time.
  * If the queue is empty, returns a default request with start time of 0.
  * Moves the head pointer and decrements the size of the queue.
  * @return The next request from the queue
  */
Request request_queue_get(void){
 8000ea4:	b4b0      	push	{r4, r5, r7}
 8000ea6:	b08d      	sub	sp, #52	@ 0x34
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if (size == 0){
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <request_queue_get+0x80>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d108      	bne.n	8000ec6 <request_queue_get+0x22>
		return (Request){ .start_time = 0 };
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	6053      	str	r3, [r2, #4]
 8000ebe:	6093      	str	r3, [r2, #8]
 8000ec0:	60d3      	str	r3, [r2, #12]
 8000ec2:	6113      	str	r3, [r2, #16]
	Request first_request = request_queue[head];
	head = (head+1) % REQUEST_QUEUE_SIZE;
	size--;

	return first_request;
}
 8000ec4:	e028      	b.n	8000f18 <request_queue_get+0x74>
	Request first_request = request_queue[head];
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <request_queue_get+0x84>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <request_queue_get+0x88>)
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f107 041c 	add.w	r4, r7, #28
 8000edc:	461d      	mov	r5, r3
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	6023      	str	r3, [r4, #0]
	head = (head+1) % REQUEST_QUEUE_SIZE;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <request_queue_get+0x84>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	425a      	negs	r2, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	bf58      	it	pl
 8000ef4:	4253      	negpl	r3, r2
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <request_queue_get+0x84>)
 8000efa:	701a      	strb	r2, [r3, #0]
	size--;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <request_queue_get+0x80>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <request_queue_get+0x80>)
 8000f06:	701a      	strb	r2, [r3, #0]
	return first_request;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	f107 041c 	add.w	r4, r7, #28
 8000f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	602b      	str	r3, [r5, #0]
}
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	3734      	adds	r7, #52	@ 0x34
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bcb0      	pop	{r4, r5, r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200014be 	.word	0x200014be
 8000f28:	200014bc 	.word	0x200014bc
 8000f2c:	200000bc 	.word	0x200000bc

08000f30 <getSetting>:
	{MAX_VOLTAGE, 4095},
	{RESOLUTION, 15},
	{SAMPLES, 5}
};

uint16_t getSetting(SettingType setting) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    return settings[setting].value;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <getSetting+0x20>)
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	885b      	ldrh	r3, [r3, #2]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000000 	.word	0x20000000

08000f54 <setSetting>:

void setSetting(SettingType setting, uint16_t value) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80bb      	strh	r3, [r7, #4]
    settings[setting].value = value;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <setSetting+0x28>)
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	805a      	strh	r2, [r3, #2]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	20000000 	.word	0x20000000

08000f80 <HAL_I2C_ListenCpltCallback>:


int prc = 1;

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f002 fa9b 	bl	80034c4 <HAL_I2C_EnableListen_IT>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	803b      	strh	r3, [r7, #0]

	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10d      	bne.n	8000fca <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <HAL_I2C_AddrCallback+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_I2C_AddrCallback+0x9c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <HAL_I2C_AddrCallback+0xa0>)
 8000fbc:	18d1      	adds	r1, r2, r3
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f002 f9cc 	bl	8003360 <HAL_I2C_Slave_Seq_Receive_IT>
				TxData[i] = packet[i];
			}
		}
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_FIRST_FRAME);
	}
}
 8000fc8:	e02f      	b.n	800102a <HAL_I2C_AddrCallback+0x92>
		txcount = 0;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <HAL_I2C_AddrCallback+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
		bool result = false;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
		uint8_t * packet = queue_get(&result);
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9b1 	bl	8001340 <queue_get>
 8000fde:	6138      	str	r0, [r7, #16]
		if(!result) packet = TX_TEMPLATE;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f083 0301 	eor.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_I2C_AddrCallback+0x5a>
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_I2C_AddrCallback+0xa8>)
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e011      	b.n	8001016 <HAL_I2C_AddrCallback+0x7e>
			for(int i = 0; i < TxSIZE; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e00b      	b.n	8001010 <HAL_I2C_AddrCallback+0x78>
				TxData[i] = packet[i];
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	7819      	ldrb	r1, [r3, #0]
 8001000:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_I2C_AddrCallback+0xac>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < TxSIZE; i++) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	ddf0      	ble.n	8000ff8 <HAL_I2C_AddrCallback+0x60>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_FIRST_FRAME);
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_I2C_AddrCallback+0xa4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_I2C_AddrCallback+0xac>)
 800101e:	18d1      	adds	r1, r2, r3
 8001020:	2300      	movs	r3, #0
 8001022:	2201      	movs	r2, #1
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 f8e9 	bl	80031fc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200014d8 	.word	0x200014d8
 8001038:	200014c0 	.word	0x200014c0
 800103c:	200014d9 	.word	0x200014d9
 8001040:	20000020 	.word	0x20000020
 8001044:	200014c8 	.word	0x200014c8

08001048 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	rxcount++;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800105a:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d81a      	bhi.n	800109a <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d10b      	bne.n	8001084 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001074:	18d1      	adds	r1, r2, r3
 8001076:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800107a:	2201      	movs	r2, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 f96f 	bl	8003360 <HAL_I2C_Slave_Seq_Receive_IT>
 8001082:	e00a      	b.n	800109a <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800108c:	18d1      	adds	r1, r2, r3
 800108e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001092:	2201      	movs	r2, #1
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f002 f963 	bl	8003360 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_RxData();
 80010a2:	f000 f863 	bl	800116c <process_RxData>
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200014d8 	.word	0x200014d8
 80010b4:	200014c0 	.word	0x200014c0

080010b8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	txcount++;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80010ca:	701a      	strb	r2, [r3, #0]
	if(txcount == TxSIZE-1){
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d10b      	bne.n	80010ec <HAL_I2C_SlaveTxCpltCallback+0x34>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_LAST_FRAME);
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_I2C_SlaveTxCpltCallback+0x58>)
 80010dc:	18d1      	adds	r1, r2, r3
 80010de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e2:	2201      	movs	r2, #1
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f002 f889 	bl	80031fc <HAL_I2C_Slave_Seq_Transmit_IT>
	}
	else{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_NEXT_FRAME);
	}

}
 80010ea:	e00a      	b.n	8001102 <HAL_I2C_SlaveTxCpltCallback+0x4a>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_NEXT_FRAME);
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <HAL_I2C_SlaveTxCpltCallback+0x58>)
 80010f4:	18d1      	adds	r1, r2, r3
 80010f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010fa:	2201      	movs	r2, #1
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f002 f87d 	bl	80031fc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200014d9 	.word	0x200014d9
 8001110:	200014c8 	.word	0x200014c8

08001114 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) //Bus Error / Berror??????
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f002 fa98 	bl	8003652 <HAL_I2C_GetError>
 8001122:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d112      	bne.n	8001150 <HAL_I2C_ErrorCallback+0x3c>
	{
		if (txcount == 0)  // error is while slave is receiving
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <HAL_I2C_ErrorCallback+0x4c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d105      	bne.n	800113e <HAL_I2C_ErrorCallback+0x2a>
		{
			//bytesRrecvd = rxcount-1;  // the first byte is the register address
			rxcount = 0;  // Reset the rxcount for the next operation
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_I2C_ErrorCallback+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
			process_RxData();
 8001138:	f000 f818 	bl	800116c <process_RxData>
 800113c:	e008      	b.n	8001150 <HAL_I2C_ErrorCallback+0x3c>
		}
		else // error while slave is transmitting
		{
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_I2C_ErrorCallback+0x4c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_I2C_ErrorCallback+0x54>)
 8001148:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_I2C_ErrorCallback+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]

		}
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f002 f9b7 	bl	80034c4 <HAL_I2C_EnableListen_IT>

	//BERR error akkor fordul elő ha változik a kommunikáció iránya
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200014d9 	.word	0x200014d9
 8001164:	200014d8 	.word	0x200014d8
 8001168:	200014da 	.word	0x200014da

0800116c <process_RxData>:

void process_RxData()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
	// Step 01: Message checksum checking
	if(1){
		// Step 02: Separate the different parts of RxData
		uint8_t command_id = RxData[1];
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <process_RxData+0x7c>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	72fb      	strb	r3, [r7, #11]
		uint8_t command_dec[6];
		for (int i = 2; i < 9; i++)
 8001178:	2302      	movs	r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e00c      	b.n	8001198 <process_RxData+0x2c>
			command_dec[i-2] = RxData[i];
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b02      	subs	r3, #2
 8001182:	4919      	ldr	r1, [pc, #100]	@ (80011e8 <process_RxData+0x7c>)
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	440a      	add	r2, r1
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	3310      	adds	r3, #16
 800118c:	443b      	add	r3, r7
 800118e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for (int i = 2; i < 9; i++)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b08      	cmp	r3, #8
 800119c:	ddef      	ble.n	800117e <process_RxData+0x12>

		// Step 03: Find which command to execute
		switch(RxData[0]){
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <process_RxData+0x7c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2be0      	cmp	r3, #224	@ 0xe0
 80011a4:	d006      	beq.n	80011b4 <process_RxData+0x48>
 80011a6:	2be0      	cmp	r3, #224	@ 0xe0
 80011a8:	dc19      	bgt.n	80011de <process_RxData+0x72>
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d010      	beq.n	80011d0 <process_RxData+0x64>
 80011ae:	2bd0      	cmp	r3, #208	@ 0xd0
 80011b0:	d007      	beq.n	80011c2 <process_RxData+0x56>
			break;
		case '0x0A':
			//Delete_requests(uint8_t * message); //ide jön a teljes üzenet
			break;
		default:
			break;
 80011b2:	e014      	b.n	80011de <process_RxData+0x72>
			setDur(command_id, command_dec);
 80011b4:	1d3a      	adds	r2, r7, #4
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fd19 	bl	8001bf2 <setDur>
			break;
 80011c0:	e00e      	b.n	80011e0 <process_RxData+0x74>
			setScale(command_id, command_dec);
 80011c2:	1d3a      	adds	r2, r7, #4
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fd6c 	bl	8001ca6 <setScale>
			break;
 80011ce:	e007      	b.n	80011e0 <process_RxData+0x74>
			reMeasure(command_id, command_dec);
 80011d0:	1d3a      	adds	r2, r7, #4
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fcd0 	bl	8001b7c <reMeasure>
			break;
 80011dc:	e000      	b.n	80011e0 <process_RxData+0x74>
			break;
 80011de:	bf00      	nop
	}
	else{
		//invalid command error
	}

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200014c0 	.word	0x200014c0

080011ec <copy_to_queue.0>:

 	if (queue.size == QUEUE_SIZE){
 		return; // QUEUE_OVERFLOW_ERROR
 	}

 	void copy_to_queue(uint8_t* item, uint8_t idx) {
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	460b      	mov	r3, r1
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	f8c7 c004 	str.w	ip, [r7, #4]
 		for (int i = 0; i < ITEM_SIZE; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e00e      	b.n	8001220 <copy_to_queue.0+0x34>
 			queue.data[idx][i] = item[i];
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	441a      	add	r2, r3
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	7811      	ldrb	r1, [r2, #0]
 800120c:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <copy_to_queue.0+0x48>)
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	441a      	add	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
 		for (int i = 0; i < ITEM_SIZE; i++) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	dded      	ble.n	8001202 <copy_to_queue.0+0x16>
 		}
 	}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	200014dc 	.word	0x200014dc

08001238 <queue_push>:
 void queue_push(uint8_t* item, bool priority, bool checksum){
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
 8001244:	4613      	mov	r3, r2
 8001246:	70bb      	strb	r3, [r7, #2]
 8001248:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124c:	60bb      	str	r3, [r7, #8]
 	uint8_t copy_lenght = (checksum) ? ITEM_SIZE - 1 : ITEM_SIZE;
 800124e:	78bb      	ldrb	r3, [r7, #2]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <queue_push+0x20>
 8001254:	230f      	movs	r3, #15
 8001256:	e000      	b.n	800125a <queue_push+0x22>
 8001258:	2310      	movs	r3, #16
 800125a:	77bb      	strb	r3, [r7, #30]
 	for (uint8_t i = 0; i < copy_lenght; i++){
 800125c:	2300      	movs	r3, #0
 800125e:	77fb      	strb	r3, [r7, #31]
 8001260:	e00b      	b.n	800127a <queue_push+0x42>
 		new_item[i] = item[i];
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	441a      	add	r2, r3
 8001268:	7ffb      	ldrb	r3, [r7, #31]
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	3320      	adds	r3, #32
 800126e:	443b      	add	r3, r7
 8001270:	f803 2c14 	strb.w	r2, [r3, #-20]
 	for (uint8_t i = 0; i < copy_lenght; i++){
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	3301      	adds	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
 800127a:	7ffa      	ldrb	r2, [r7, #31]
 800127c:	7fbb      	ldrb	r3, [r7, #30]
 800127e:	429a      	cmp	r2, r3
 8001280:	d3ef      	bcc.n	8001262 <queue_push+0x2a>
 	if (checksum){
 8001282:	78bb      	ldrb	r3, [r7, #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <queue_push+0x5c>
 		new_item[ITEM_SIZE-1] = calculate_checksum(item, ITEM_SIZE-1);
 8001288:	210f      	movs	r1, #15
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fc28 	bl	8000ae0 <calculate_checksum>
 8001290:	4603      	mov	r3, r0
 8001292:	76fb      	strb	r3, [r7, #27]
 	if (queue.size == QUEUE_SIZE){
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <queue_push+0x104>)
 8001296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800129a:	789b      	ldrb	r3, [r3, #2]

 	if (priority){
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01e      	beq.n	80012e0 <queue_push+0xa8>
 		queue.head = (queue.head - 1 + QUEUE_SIZE) % QUEUE_SIZE;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <queue_push+0x104>)
 80012a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	33ff      	adds	r3, #255	@ 0xff
 80012ae:	425a      	negs	r2, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	bf58      	it	pl
 80012b6:	4253      	negpl	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <queue_push+0x104>)
 80012bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c0:	701a      	strb	r2, [r3, #0]
 		copy_to_queue(new_item, queue.head);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <queue_push+0x104>)
 80012c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	f107 0108 	add.w	r1, r7, #8
 80012d4:	468c      	mov	ip, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff87 	bl	80011ec <copy_to_queue.0>
 80012de:	e01e      	b.n	800131e <queue_push+0xe6>
 	} else {
 		copy_to_queue(new_item, queue.tail);
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <queue_push+0x104>)
 80012e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	f107 0108 	add.w	r1, r7, #8
 80012f2:	468c      	mov	ip, r1
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff78 	bl	80011ec <copy_to_queue.0>
 		queue.tail = (queue.tail + 1 + QUEUE_SIZE) % QUEUE_SIZE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <queue_push+0x104>)
 80012fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800130a:	425a      	negs	r2, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	bf58      	it	pl
 8001312:	4253      	negpl	r3, r2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <queue_push+0x104>)
 8001318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800131c:	705a      	strb	r2, [r3, #1]
 	}
 	queue.size++;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <queue_push+0x104>)
 8001320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001324:	789b      	ldrb	r3, [r3, #2]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <queue_push+0x104>)
 800132e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001332:	709a      	strb	r2, [r3, #2]
 }
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200014dc 	.word	0x200014dc

08001340 <queue_get>:

 uint8_t* queue_get(bool* result){
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 	if (queue.size == 0){
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <queue_get+0x80>)
 800134a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d104      	bne.n	8001360 <queue_get+0x20>
 		*result = false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 		return NULL;
 800135c:	2300      	movs	r3, #0
 800135e:	e028      	b.n	80013b2 <queue_get+0x72>
 	}

 	uint8_t* item = queue.data[queue.head];
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <queue_get+0x80>)
 8001362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <queue_get+0x80>)
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
 	queue.head = (queue.head + 1 + QUEUE_SIZE) % QUEUE_SIZE;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <queue_get+0x80>)
 8001374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001380:	425a      	negs	r2, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	bf58      	it	pl
 8001388:	4253      	negpl	r3, r2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <queue_get+0x80>)
 800138e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001392:	701a      	strb	r2, [r3, #0]
 	queue.size--;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <queue_get+0x80>)
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <queue_get+0x80>)
 80013a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a8:	709a      	strb	r2, [r3, #2]

 	*result = true;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 	return item;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 }
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200014dc 	.word	0x200014dc

080013c4 <add_header>:
 	queue.tail = 0;
 	queue.size = 0;
 }


void add_header(Request request, uint16_t duration){
 80013c4:	b084      	sub	sp, #16
 80013c6:	b480      	push	{r7}
 80013c8:	b089      	sub	sp, #36	@ 0x24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80013d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint8_t headerData[ITEM_SIZE];
	 uint16_t localDur = duration;
 80013d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80013d6:	82fb      	strh	r3, [r7, #22]
	 uint32_t localTime = request.start_time;
 80013d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013da:	61fb      	str	r3, [r7, #28]
	 headerData[0] = request.ID;
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013e0:	713b      	strb	r3, [r7, #4]
	 headerData[2] = (uint8_t)(localDur >> 8);
 80013e2:	8afb      	ldrh	r3, [r7, #22]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	71bb      	strb	r3, [r7, #6]
	 localDur -= (headerData[2] << 8);
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	8afa      	ldrh	r2, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	82fb      	strh	r3, [r7, #22]
	 headerData[3] = (uint8_t)(localDur);
 80013f8:	8afb      	ldrh	r3, [r7, #22]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	71fb      	strb	r3, [r7, #7]
	 for(int i = 0; i < 4; i++){
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	e01e      	b.n	8001442 <add_header+0x7e>
		 headerData[4+i] = (uint8_t)(localTime >> 24-i*8);
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	f1c3 0303 	rsb	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	40da      	lsrs	r2, r3
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	3304      	adds	r3, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	3320      	adds	r3, #32
 8001418:	443b      	add	r3, r7
 800141a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		 localTime -= (headerData[i] << 24-i*8);
 800141e:	1d3a      	adds	r2, r7, #4
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f1c3 0303 	rsb	r3, r3, #3
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	461a      	mov	r2, r3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	61fb      	str	r3, [r7, #28]
	 for(int i = 0; i < 4; i++){
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	3301      	adds	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b03      	cmp	r3, #3
 8001446:	dddd      	ble.n	8001404 <add_header+0x40>
	 }
	 //headerData[9] = request.number_of_Intervals;
	 headerData[10] = request.min_voltage;
 8001448:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73bb      	strb	r3, [r7, #14]
	 headerData[11] = request.max_voltage;
 800144e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001450:	b2db      	uxtb	r3, r3
 8001452:	73fb      	strb	r3, [r7, #15]
	 headerData[12] = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	743b      	strb	r3, [r7, #16]
	 headerData[13] = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	747b      	strb	r3, [r7, #17]
	 headerData[14] = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	74bb      	strb	r3, [r7, #18]
	 headerData[15] = 0xFF;
 8001460:	23ff      	movs	r3, #255	@ 0xff
 8001462:	74fb      	strb	r3, [r7, #19]
	 //queue_push(headerData, priority???, checksum???);

 }
 8001464:	bf00      	nop
 8001466:	3724      	adds	r7, #36	@ 0x24
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	b004      	add	sp, #16
 8001470:	4770      	bx	lr
 8001472:	0000      	movs	r0, r0
 8001474:	0000      	movs	r0, r0
	...

08001478 <add_spectrum>:


 void add_spectrum(Request request, uint8_t* spectrum, uint8_t resolution){
 8001478:	b084      	sub	sp, #16
 800147a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800147e:	b08d      	sub	sp, #52	@ 0x34
 8001480:	af00      	add	r7, sp, #0
 8001482:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8001486:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800148a:	466b      	mov	r3, sp
 800148c:	461e      	mov	r6, r3
	 const uint8_t everyBit = 15*8; //120, we can modify to 128 and it should work
 800148e:	2378      	movs	r3, #120	@ 0x78
 8001490:	77fb      	strb	r3, [r7, #31]
	 uint8_t importantBits = everyBit/resolution; // how many bits do we keep in
 8001492:	7ffa      	ldrb	r2, [r7, #31]
 8001494:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001498:	fbb2 f3f3 	udiv	r3, r2, r3
 800149c:	77bb      	strb	r3, [r7, #30]

	 uint8_t bitArr[everyBit]; //120 byte
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	2200      	movs	r2, #0
 80014a8:	4698      	mov	r8, r3
 80014aa:	4691      	mov	r9, r2
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	2200      	movs	r2, #0
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	00eb      	lsls	r3, r5, #3
 80014d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014d6:	00e2      	lsls	r2, r4, #3
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	3307      	adds	r3, #7
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	ebad 0d03 	sub.w	sp, sp, r3
 80014e4:	466b      	mov	r3, sp
 80014e6:	3300      	adds	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
	 uint8_t data[ITEM_SIZE] = {0x00};
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
	 for(int i = 0; i < resolution; i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fe:	e044      	b.n	800158a <add_spectrum+0x112>
		 for(int j = 0; j < importantBits; j++){
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001504:	e03a      	b.n	800157c <add_spectrum+0x104>
			 // Converting to base 2
			 if(spectrum[i] % 2 == 0){
 8001506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001508:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d115      	bne.n	8001544 <add_spectrum+0xcc>
				 spectrum[i] /= 2;
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800151c:	4413      	add	r3, r2
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001522:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001524:	440b      	add	r3, r1
 8001526:	0852      	lsrs	r2, r2, #1
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
				 bitArr[(i+1)*importantBits-j-1] = 0;
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	3301      	adds	r3, #1
 8001530:	7fba      	ldrb	r2, [r7, #30]
 8001532:	fb03 f202 	mul.w	r2, r3, r2
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	2100      	movs	r1, #0
 8001540:	54d1      	strb	r1, [r2, r3]
 8001542:	e018      	b.n	8001576 <add_spectrum+0xfe>
			 }
			 else{
				 spectrum[i] = (spectrum[i]-1)/2;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	4619      	mov	r1, r3
 8001556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001558:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800155a:	4413      	add	r3, r2
 800155c:	b2ca      	uxtb	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
				 bitArr[(i+1)*importantBits-j-1] = 1;
 8001560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001562:	3301      	adds	r3, #1
 8001564:	7fba      	ldrb	r2, [r7, #30]
 8001566:	fb03 f202 	mul.w	r2, r3, r2
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	2101      	movs	r1, #1
 8001574:	54d1      	strb	r1, [r2, r3]
		 for(int j = 0; j < importantBits; j++){
 8001576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001578:	3301      	adds	r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001580:	429a      	cmp	r2, r3
 8001582:	dbc0      	blt.n	8001506 <add_spectrum+0x8e>
	 for(int i = 0; i < resolution; i++){
 8001584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001586:	3301      	adds	r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800158e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001590:	429a      	cmp	r2, r3
 8001592:	dbb5      	blt.n	8001500 <add_spectrum+0x88>
			 }
		 }
	 }

	 for(int k = 0; k < ITEM_SIZE-1; k++){
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
 8001598:	e03d      	b.n	8001616 <add_spectrum+0x19e>
		 for(int m = 0; m < 8; m++){
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	e034      	b.n	800160a <add_spectrum+0x192>
			 if(bitArr[k*8+m] == 1){
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	00da      	lsls	r2, r3, #3
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	4413      	add	r3, r2
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d129      	bne.n	8001604 <add_spectrum+0x18c>
				 data[k] += pow(2, 7-m);
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff58 	bl	800046c <__aeabi_i2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	ec43 2b11 	vmov	d1, r2, r3
 80015c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8001640 <add_spectrum+0x1c8>
 80015c8:	f004 fec4 	bl	8006354 <pow>
 80015cc:	ec55 4b10 	vmov	r4, r5, d0
 80015d0:	1d3a      	adds	r2, r7, #4
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff47 	bl	800046c <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe fdf5 	bl	80001d4 <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa55 	bl	8000aa0 <__aeabi_d2uiz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	1d3a      	adds	r2, r7, #4
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	4413      	add	r3, r2
 8001600:	460a      	mov	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]
		 for(int m = 0; m < 8; m++){
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	3301      	adds	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b07      	cmp	r3, #7
 800160e:	ddc7      	ble.n	80015a0 <add_spectrum+0x128>
	 for(int k = 0; k < ITEM_SIZE-1; k++){
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	3301      	adds	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	2b0e      	cmp	r3, #14
 800161a:	ddbe      	ble.n	800159a <add_spectrum+0x122>
			 }
		 }
	 }
	 queue_push(&data, request.is_priority, false);
 800161c:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe07 	bl	8001238 <queue_push>
 800162a:	46b5      	mov	sp, r6



}
 800162c:	bf00      	nop
 800162e:	3734      	adds	r7, #52	@ 0x34
 8001630:	46bd      	mov	sp, r7
 8001632:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001636:	b004      	add	sp, #16
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40000000 	.word	0x40000000

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b08d      	sub	sp, #52	@ 0x34
 800164c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f000 fb8d 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 f83b 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001656:	f000 f92d 	bl	80018b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800165a:	f000 f88f 	bl	800177c <MX_ADC1_Init>
  MX_I2C2_Init();
 800165e:	f000 f8e9 	bl	8001834 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK){
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <main+0x78>)
 8001664:	f001 ff2e 	bl	80034c4 <HAL_I2C_EnableListen_IT>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <main+0x2a>
      	  Error_Handler();
 800166e:	f000 f975 	bl	800195c <Error_Handler>
       }
       HAL_ADC_Start(&hadc1);
 8001672:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <main+0x7c>)
 8001674:	f000 fd8a 	bl	800218c <HAL_ADC_Start>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2180      	movs	r1, #128	@ 0x80
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f001 fd08 	bl	8003094 <HAL_GPIO_WritePin>
       uint8_t data[] = {0xFF, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E};
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <main+0x80>)
 8001686:	f107 0418 	add.w	r4, r7, #24
 800168a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168c:	c407      	stmia	r4!, {r0, r1, r2}
 800168e:	8023      	strh	r3, [r4, #0]
 8001690:	3402      	adds	r4, #2
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	7023      	strb	r3, [r4, #0]
       queue_push(data, false, false);
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fdca 	bl	8001238 <queue_push>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Request request = request_queue_get();
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbfc 	bl	8000ea4 <request_queue_get>
	if(request.start_time) {
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <main+0x5c>
		max_hit_measurement(request);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	f7ff fa31 	bl	8000b20 <max_hit_measurement>
  {
 80016be:	e7f1      	b.n	80016a4 <main+0x5c>
 80016c0:	20002530 	.word	0x20002530
 80016c4:	200024e0 	.word	0x200024e0
 80016c8:	08007230 	.word	0x08007230

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b09c      	sub	sp, #112	@ 0x70
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d6:	2228      	movs	r2, #40	@ 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fe08 	bl	80062f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2230      	movs	r2, #48	@ 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fdfa 	bl	80062f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	2301      	movs	r3, #1
 8001702:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001704:	2310      	movs	r3, #16
 8001706:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800170c:	2300      	movs	r3, #0
 800170e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001710:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001714:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fa56 	bl	8004bcc <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001726:	f000 f919 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800173e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fa7f 	bl	8005c48 <HAL_RCC_ClockConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001750:	f000 f904 	bl	800195c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC1;
 8001754:	23c0      	movs	r3, #192	@ 0xc0
 8001756:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800175c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fc3f 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001770:	f000 f8f4 	bl	800195c <Error_Handler>
  }
}
 8001774:	bf00      	nop
 8001776:	3770      	adds	r7, #112	@ 0x70
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <MX_ADC1_Init+0xb4>)
 8001794:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001798:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800179a:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <MX_ADC1_Init+0xb4>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a0:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ac:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017dc:	2208      	movs	r2, #8
 80017de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <MX_ADC1_Init+0xb4>)
 80017ee:	f000 fb47 	bl	8001e80 <HAL_ADC_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80017f8:	f000 f8b0 	bl	800195c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001800:	2301      	movs	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_ADC1_Init+0xb4>)
 800181a:	f000 fdf1 	bl	8002400 <HAL_ADC_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001824:	f000 f89a 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200024e0 	.word	0x200024e0

08001834 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_I2C2_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <MX_I2C2_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <MX_I2C2_Init+0x7c>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 162;
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001846:	22a2      	movs	r2, #162	@ 0xa2
 8001848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_I2C2_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <MX_I2C2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_I2C2_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001870:	f001 fc28 	bl	80030c4 <HAL_I2C_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800187a:	f000 f86f 	bl	800195c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001882:	f003 f90b 	bl	8004a9c <HAL_I2CEx_ConfigAnalogFilter>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 f866 	bl	800195c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_I2C2_Init+0x74>)
 8001894:	f003 f94d 	bl	8004b32 <HAL_I2CEx_ConfigDigitalFilter>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f85d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20002530 	.word	0x20002530
 80018ac:	40005800 	.word	0x40005800
 80018b0:	00201d2b 	.word	0x00201d2b

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <MX_GPIO_Init+0xa0>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	21e0      	movs	r1, #224	@ 0xe0
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001902:	f001 fbc7 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	4813      	ldr	r0, [pc, #76]	@ (8001958 <MX_GPIO_Init+0xa4>)
 800190c:	f001 fbc2 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001910:	23e0      	movs	r3, #224	@ 0xe0
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192a:	f001 fa41 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_GPIO_Init+0xa4>)
 8001946:	f001 fa33 	bl	8002db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_MspInit+0x44>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_MspInit+0x44>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_MspInit+0x44>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_MspInit+0x44>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d0:	d124      	bne.n	8001a1c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a13      	ldr	r2, [pc, #76]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_ADC_MspInit+0x74>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a18:	f001 f9ca 	bl	8002db0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a20      	ldr	r2, [pc, #128]	@ (8001ac8 <HAL_I2C_MspInit+0xa0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d139      	bne.n	8001abe <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a54:	6153      	str	r3, [r2, #20]
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f001 f995 	bl	8002db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <HAL_I2C_MspInit+0xa4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2021      	movs	r0, #33	@ 0x21
 8001aa4:	f001 f903 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001aa8:	2021      	movs	r0, #33	@ 0x21
 8001aaa:	f001 f91c 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2022      	movs	r0, #34	@ 0x22
 8001ab4:	f001 f8fb 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ab8:	2022      	movs	r0, #34	@ 0x22
 8001aba:	f001 f914 	bl	8002ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	@ 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	40021000 	.word	0x40021000

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 f967 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <I2C2_EV_IRQHandler+0x10>)
 8001b36:	f001 fce5 	bl	8003504 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20002530 	.word	0x20002530

08001b44 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <I2C2_ER_IRQHandler+0x10>)
 8001b4a:	f001 fcf5 	bl	8003538 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20002530 	.word	0x20002530

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <reMeasure>:
#include "Request.h"
#include "SettingsStore.h"
#include "Measurements.h"
#include <string.h>

void reMeasure(uint8_t id, uint8_t dec[]) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
    Request new_request;
    // Almost all the parameters of a Request is given by settings
    // (which currently doesn't exists), so I gave some sample here.
    new_request.ID = id;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	733b      	strb	r3, [r7, #12]
    new_request.type = getSetting(MODE_OF_OPERATION);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff f9cf 	bl	8000f30 <getSetting>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	737b      	strb	r3, [r7, #13]
    new_request.is_priority = /*dec[4] & 0x80*/ false; // the first bit of byte 5
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73bb      	strb	r3, [r7, #14]
    new_request.is_header = /*dec[4] & 0x40*/ false; // the second bit of byte 5
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    new_request.limit = getSetting(DURATION);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff f9c5 	bl	8000f30 <getSetting>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	743b      	strb	r3, [r7, #16]
    //new_request.start_time = (dec[0] << 24) | (dec[1] << 16) | (dec[2] << 8) | dec[3];
    new_request.start_time = 100;
 8001bac:	2364      	movs	r3, #100	@ 0x64
 8001bae:	617b      	str	r3, [r7, #20]
    new_request.min_voltage = getSetting(MIN_VOLTAGE);
 8001bb0:	2004      	movs	r0, #4
 8001bb2:	f7ff f9bd 	bl	8000f30 <getSetting>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	833b      	strh	r3, [r7, #24]
    new_request.max_voltage = getSetting(MAX_VOLTAGE);
 8001bba:	2005      	movs	r0, #5
 8001bbc:	f7ff f9b8 	bl	8000f30 <getSetting>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	837b      	strh	r3, [r7, #26]
    new_request.samples = getSetting(SAMPLES);
 8001bc4:	2007      	movs	r0, #7
 8001bc6:	f7ff f9b3 	bl	8000f30 <getSetting>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	773b      	strb	r3, [r7, #28]
    new_request.resolution = getSetting(RESOLUTION);
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7ff f9ad 	bl	8000f30 <getSetting>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	777b      	strb	r3, [r7, #29]
    request_queue_put(new_request);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be6:	f7ff f903 	bl	8000df0 <request_queue_put>
}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <setDur>:
 */
#include "Commands/SetDur.h"
#include "Request.h"
#include "SettingsStore.h"

void setDur(uint8_t id, uint8_t* dec) {
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	6039      	str	r1, [r7, #0]
 8001bfc:	71fb      	strb	r3, [r7, #7]
    setSetting(REPETITIONS, (*dec)>>1);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f7ff f9a3 	bl	8000f54 <setSetting>
    setSetting(MODE_OF_OPERATION, ((*dec)%2) ? MAX_HITS : MAX_TIME);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <setDur+0x2e>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <setDur+0x30>
 8001c20:	2302      	movs	r3, #2
 8001c22:	4619      	mov	r1, r3
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f995 	bl	8000f54 <setSetting>

    int dur = *(dec+1);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
    for(__uint8_t i = 0; i <= 8; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	74fb      	strb	r3, [r7, #19]
 8001c36:	e005      	b.n	8001c44 <setDur+0x52>
        dur *= 2;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
    for(__uint8_t i = 0; i <= 8; i++) {
 8001c3e:	7cfb      	ldrb	r3, [r7, #19]
 8001c40:	3301      	adds	r3, #1
 8001c42:	74fb      	strb	r3, [r7, #19]
 8001c44:	7cfb      	ldrb	r3, [r7, #19]
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d9f6      	bls.n	8001c38 <setDur+0x46>
    }
    dur += *(dec+2);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4413      	add	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
    setSetting(DURATION, dur);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff f978 	bl	8000f54 <setSetting>

    int breaktime = *(dec+3);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3303      	adds	r3, #3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
    for(__uint8_t j = 0; j <= 8; j++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	72fb      	strb	r3, [r7, #11]
 8001c70:	e005      	b.n	8001c7e <setDur+0x8c>
        breaktime *= 2;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
    for(__uint8_t j = 0; j <= 8; j++) {
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	72fb      	strb	r3, [r7, #11]
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d9f6      	bls.n	8001c72 <setDur+0x80>
    }
    breaktime += *(dec+4);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3304      	adds	r3, #4
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
    setSetting(BREAKTIME, breaktime);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7ff f95b 	bl	8000f54 <setSetting>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <setScale>:
 */
#include "Commands/SetScale.h"
#include "SettingsStore.h"


void setScale(uint8_t id, uint8_t* dec) {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	6039      	str	r1, [r7, #0]
 8001cb0:	71fb      	strb	r3, [r7, #7]
    setSetting(MIN_VOLTAGE, (uint16_t)((dec[0] << 4) + (dec[1] >> 4)));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2004      	movs	r0, #4
 8001ccc:	f7ff f942 	bl	8000f54 <setSetting>
    setSetting(MAX_VOLTAGE, (uint16_t)(((dec[1]%16)<<8)+dec[2]));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	3202      	adds	r2, #2
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	2005      	movs	r0, #5
 8001cee:	f7ff f931 	bl	8000f54 <setSetting>
    setSetting(RESOLUTION, (uint16_t)dec[3]);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3303      	adds	r3, #3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	f7ff f92a 	bl	8000f54 <setSetting>
    setSetting(SAMPLES, (uint16_t)dec[4]);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3304      	adds	r3, #4
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	2007      	movs	r0, #7
 8001d0a:	f7ff f923 	bl	8000f54 <setSetting>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff ff1c 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopForever+0xe>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopForever+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f004 fae1 	bl	800630c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4a:	f7ff fc7d 	bl	8001648 <main>

08001d4e <LoopForever>:

LoopForever:
    b LoopForever
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001d5c:	080072a8 	.word	0x080072a8
  ldr r2, =_sbss
 8001d60:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001d64:	200026c0 	.word	0x200026c0

08001d68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 ff8b 	bl	8002c98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdee 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 ffa3 	bl	8002d02 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd4:	f000 ff6b 	bl	8002cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000030 	.word	0x20000030
 8001df0:	20000038 	.word	0x20000038
 8001df4:	20000034 	.word	0x20000034

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000038 	.word	0x20000038
 8001e1c:	20002584 	.word	0x20002584

08001e20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20002584 	.word	0x20002584

08001e38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000038 	.word	0x20000038

08001e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b09a      	sub	sp, #104	@ 0x68
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e169      	b.n	8002174 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d176      	bne.n	8001fa0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d152      	bne.n	8001f60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fd6b 	bl	80019b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d13b      	bne.n	8001f60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fd9f 	bl	8002a2c <ADC_Disable>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d12f      	bne.n	8001f60 <HAL_ADC_Init+0xe0>
 8001f00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12b      	bne.n	8001f60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	f043 0202 	orr.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800217c <HAL_ADC_Init+0x2fc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a8f      	ldr	r2, [pc, #572]	@ (8002180 <HAL_ADC_Init+0x300>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9a      	lsrs	r2, r3, #18
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f52:	e002      	b.n	8001f5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f7c:	d110      	bne.n	8001fa0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f023 0312 	bic.w	r3, r3, #18
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 80d6 	bne.w	800215a <HAL_ADC_Init+0x2da>
 8001fae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80d1 	bne.w	800215a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80c9 	bne.w	800215a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_ADC_Init+0x304>)
 8001fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_ADC_Init+0x180>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_Init+0x180>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_ADC_Init+0x182>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11c      	bne.n	8002040 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002006:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_ADC_Init+0x1a8>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ADC_Init+0x1a8>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_ADC_Init+0x1aa>
 8002028:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800202a:	2b00      	cmp	r3, #0
 800202c:	d108      	bne.n	8002040 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800202e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	431a      	orrs	r2, r3
 800203c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800203e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	035b      	lsls	r3, r3, #13
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800204a:	2a01      	cmp	r2, #1
 800204c:	d002      	beq.n	8002054 <HAL_ADC_Init+0x1d4>
 800204e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002052:	e000      	b.n	8002056 <HAL_ADC_Init+0x1d6>
 8002054:	2200      	movs	r2, #0
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4313      	orrs	r3, r2
 8002064:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002066:	4313      	orrs	r3, r2
 8002068:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d11b      	bne.n	80020ac <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7e5b      	ldrb	r3, [r3, #25]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	3b01      	subs	r3, #1
 8002082:	045a      	lsls	r2, r3, #17
 8002084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002086:	4313      	orrs	r3, r2
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	663b      	str	r3, [r7, #96]	@ 0x60
 800208e:	e00d      	b.n	80020ac <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d007      	beq.n	80020c4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	4313      	orrs	r3, r2
 80020be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020c0:	4313      	orrs	r3, r2
 80020c2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d114      	bne.n	80020fc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020e0:	f023 0302 	bic.w	r3, r3, #2
 80020e4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e1b      	ldrb	r3, [r3, #24]
 80020ea:	039a      	lsls	r2, r3, #14
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4313      	orrs	r3, r2
 80020f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020f8:	4313      	orrs	r3, r2
 80020fa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_ADC_Init+0x308>)
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800210c:	430b      	orrs	r3, r1
 800210e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10c      	bne.n	8002132 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f023 010f 	bic.w	r1, r3, #15
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002130:	e007      	b.n	8002142 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020f 	bic.w	r2, r2, #15
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f023 0303 	bic.w	r3, r3, #3
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
 8002158:	e00a      	b.n	8002170 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f023 0312 	bic.w	r3, r3, #18
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800216a:	2301      	movs	r3, #1
 800216c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002170:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002174:	4618      	mov	r0, r3
 8002176:	3768      	adds	r7, #104	@ 0x68
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000030 	.word	0x20000030
 8002180:	431bde83 	.word	0x431bde83
 8002184:	50000300 	.word	0x50000300
 8002188:	fff0c007 	.word	0xfff0c007

0800218c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d158      	bne.n	8002258 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_Start+0x28>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e054      	b.n	800225e <HAL_ADC_Start+0xd2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fbd1 	bl	8002964 <ADC_Enable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d140      	bne.n	800224e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002202:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d106      	bne.n	8002226 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	f023 0206 	bic.w	r2, r3, #6
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
 8002224:	e002      	b.n	800222c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	221c      	movs	r2, #28
 800223a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0204 	orr.w	r2, r2, #4
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e006      	b.n	800225c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002256:	e001      	b.n	800225c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d102      	bne.n	8002284 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800227e:	2308      	movs	r3, #8
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e02e      	b.n	80022e2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002284:	4b56      	ldr	r3, [pc, #344]	@ (80023e0 <HAL_ADC_PollForConversion+0x178>)
 8002286:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11d      	bne.n	80022de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e08d      	b.n	80023d6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07b      	b.n	80023d6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80022de:	230c      	movs	r3, #12
 80022e0:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80022ea:	f7ff fd99 	bl	8001e20 <HAL_GetTick>
 80022ee:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022f0:	e021      	b.n	8002336 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f8:	d01d      	beq.n	8002336 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_ADC_PollForConversion+0xa8>
 8002300:	f7ff fd8e 	bl	8001e20 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d212      	bcs.n	8002336 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04f      	b.n	80023d6 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0d6      	beq.n	80022f2 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800235a:	2b00      	cmp	r3, #0
 800235c:	d131      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002364:	2b00      	cmp	r3, #0
 8002366:	d12c      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b08      	cmp	r3, #8
 8002374:	d125      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d112      	bne.n	80023aa <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d112      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80023a8:	e00b      	b.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	50000300 	.word	0x50000300

080023e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b09b      	sub	sp, #108	@ 0x6c
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x22>
 800241e:	2302      	movs	r3, #2
 8002420:	e295      	b.n	800294e <HAL_ADC_ConfigChannel+0x54e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 8279 	bne.w	800292c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d81c      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	461a      	mov	r2, r3
 8002456:	231f      	movs	r3, #31
 8002458:	4093      	lsls	r3, r2
 800245a:	43db      	mvns	r3, r3
 800245c:	4019      	ands	r1, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
 800247a:	e063      	b.n	8002544 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d81e      	bhi.n	80024c2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	3b1e      	subs	r3, #30
 8002498:	221f      	movs	r2, #31
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	4019      	ands	r1, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	fa00 f203 	lsl.w	r2, r0, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c0:	e040      	b.n	8002544 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b0e      	cmp	r3, #14
 80024c8:	d81e      	bhi.n	8002508 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	3b3c      	subs	r3, #60	@ 0x3c
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4019      	ands	r1, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	3b3c      	subs	r3, #60	@ 0x3c
 80024fa:	fa00 f203 	lsl.w	r2, r0, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	639a      	str	r2, [r3, #56]	@ 0x38
 8002506:	e01d      	b.n	8002544 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	3b5a      	subs	r3, #90	@ 0x5a
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	4019      	ands	r1, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	3b5a      	subs	r3, #90	@ 0x5a
 8002538:	fa00 f203 	lsl.w	r2, r0, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80e5 	bne.w	800271e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d91c      	bls.n	8002596 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	3b1e      	subs	r3, #30
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	619a      	str	r2, [r3, #24]
 8002594:	e019      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6959      	ldr	r1, [r3, #20]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4019      	ands	r1, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6898      	ldr	r0, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	08db      	lsrs	r3, r3, #3
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d84f      	bhi.n	800268c <HAL_ADC_ConfigChannel+0x28c>
 80025ec:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002627 	.word	0x08002627
 80025fc:	08002649 	.word	0x08002649
 8002600:	0800266b 	.word	0x0800266b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800260a:	4b97      	ldr	r3, [pc, #604]	@ (8002868 <HAL_ADC_ConfigChannel+0x468>)
 800260c:	4013      	ands	r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	0691      	lsls	r1, r2, #26
 8002614:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002616:	430a      	orrs	r2, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002622:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002624:	e07b      	b.n	800271e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800262c:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_ADC_ConfigChannel+0x468>)
 800262e:	4013      	ands	r3, r2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	0691      	lsls	r1, r2, #26
 8002636:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002638:	430a      	orrs	r2, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002644:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002646:	e06a      	b.n	800271e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800264e:	4b86      	ldr	r3, [pc, #536]	@ (8002868 <HAL_ADC_ConfigChannel+0x468>)
 8002650:	4013      	ands	r3, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	0691      	lsls	r1, r2, #26
 8002658:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800265a:	430a      	orrs	r2, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002666:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002668:	e059      	b.n	800271e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002670:	4b7d      	ldr	r3, [pc, #500]	@ (8002868 <HAL_ADC_ConfigChannel+0x468>)
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	0691      	lsls	r1, r2, #26
 800267a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800267c:	430a      	orrs	r2, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002688:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800268a:	e048      	b.n	800271e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	069b      	lsls	r3, r3, #26
 800269c:	429a      	cmp	r2, r3
 800269e:	d107      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	069b      	lsls	r3, r3, #26
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d107      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026d2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	069b      	lsls	r3, r3, #26
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026f6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800271a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800271c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d108      	bne.n	800273e <HAL_ADC_ConfigChannel+0x33e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x33e>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_ADC_ConfigChannel+0x340>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 80fe 	bne.w	8002942 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00f      	beq.n	800276e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43da      	mvns	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	400a      	ands	r2, r1
 8002768:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800276c:	e049      	b.n	8002802 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d91c      	bls.n	80027ca <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	3b1b      	subs	r3, #27
 80027a2:	2207      	movs	r2, #7
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4019      	ands	r1, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6898      	ldr	r0, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	3b1b      	subs	r3, #27
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]
 80027c8:	e01b      	b.n	8002802 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6959      	ldr	r1, [r3, #20]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	2207      	movs	r2, #7
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	4019      	ands	r1, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6898      	ldr	r0, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002802:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <HAL_ADC_ConfigChannel+0x46c>)
 8002804:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d105      	bne.n	800281a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800280e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d014      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800281e:	2b11      	cmp	r3, #17
 8002820:	d105      	bne.n	800282e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002832:	2b12      	cmp	r3, #18
 8002834:	f040 8085 	bne.w	8002942 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d17e      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10c      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x470>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x470>
 8002864:	2301      	movs	r3, #1
 8002866:	e004      	b.n	8002872 <HAL_ADC_ConfigChannel+0x472>
 8002868:	83fff000 	.word	0x83fff000
 800286c:	50000300 	.word	0x50000300
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d150      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002876:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x498>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x498>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_ADC_ConfigChannel+0x49a>
 8002898:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d13c      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d11d      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x4e2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ae:	d118      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <HAL_ADC_ConfigChannel+0x55c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <HAL_ADC_ConfigChannel+0x560>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9a      	lsrs	r2, r3, #18
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028d2:	e002      	b.n	80028da <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f9      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028e0:	e02e      	b.n	8002940 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b11      	cmp	r3, #17
 80028e8:	d10b      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x502>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f2:	d106      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80028f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80028fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002900:	e01e      	b.n	8002940 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b12      	cmp	r3, #18
 8002908:	d11a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800290a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002914:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002916:	e013      	b.n	8002940 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800292a:	e00a      	b.n	8002942 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800293e:	e000      	b.n	8002942 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002940:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800294a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800294e:	4618      	mov	r0, r3
 8002950:	376c      	adds	r7, #108	@ 0x6c
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000030 	.word	0x20000030
 8002960:	431bde83 	.word	0x431bde83

08002964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <ADC_Enable+0x2c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <ADC_Enable+0x2c>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <ADC_Enable+0x2e>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d143      	bne.n	8002a1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <ADC_Enable+0xc4>)
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e02f      	b.n	8002a20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80029d0:	f7ff fa26 	bl	8001e20 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029d6:	e01b      	b.n	8002a10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d8:	f7ff fa22 	bl	8001e20 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d914      	bls.n	8002a10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d00d      	beq.n	8002a10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0210 	orr.w	r2, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d1dc      	bne.n	80029d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	8000003f 	.word	0x8000003f

08002a2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <ADC_Disable+0x2c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <ADC_Disable+0x2c>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <ADC_Disable+0x2e>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d047      	beq.n	8002aee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030d 	and.w	r3, r3, #13
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10f      	bne.n	8002a8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0202 	orr.w	r2, r2, #2
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2203      	movs	r2, #3
 8002a82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a84:	f7ff f9cc 	bl	8001e20 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a8a:	e029      	b.n	8002ae0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0210 	orr.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e023      	b.n	8002af0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aa8:	f7ff f9ba 	bl	8001e20 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d914      	bls.n	8002ae0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d0dc      	beq.n	8002aa8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c64:	d301      	bcc.n	8002c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <SysTick_Config+0x40>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c72:	210f      	movs	r1, #15
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c78:	f7ff ff8e 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <SysTick_Config+0x40>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c82:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <SysTick_Config+0x40>)
 8002c84:	2207      	movs	r2, #7
 8002c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff29 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc0:	f7ff ff3e 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7ff ff8e 	bl	8002bec <NVIC_EncodePriority>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff5d 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff31 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffa2 	bl	8002c54 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d005      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e027      	b.n	8002d8c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020e 	bic.w	r2, r2, #14
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
    }
  }
  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e14e      	b.n	800305e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8140 	beq.w	8003058 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d005      	beq.n	8002df0 <HAL_GPIO_Init+0x40>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d130      	bne.n	8002e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 0201 	and.w	r2, r3, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d017      	beq.n	8002e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d123      	bne.n	8002ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 809a 	beq.w	8003058 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	4b55      	ldr	r3, [pc, #340]	@ (800307c <HAL_GPIO_Init+0x2cc>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a54      	ldr	r2, [pc, #336]	@ (800307c <HAL_GPIO_Init+0x2cc>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b52      	ldr	r3, [pc, #328]	@ (800307c <HAL_GPIO_Init+0x2cc>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3c:	4a50      	ldr	r2, [pc, #320]	@ (8003080 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f66:	d013      	beq.n	8002f90 <HAL_GPIO_Init+0x1e0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	@ (8003084 <HAL_GPIO_Init+0x2d4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_GPIO_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a45      	ldr	r2, [pc, #276]	@ (8003088 <HAL_GPIO_Init+0x2d8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <HAL_GPIO_Init+0x1d8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a44      	ldr	r2, [pc, #272]	@ (800308c <HAL_GPIO_Init+0x2dc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_GPIO_Init+0x1d4>
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_GPIO_Init+0x1e2>
 8002f84:	2305      	movs	r3, #5
 8002f86:	e004      	b.n	8002f92 <HAL_GPIO_Init+0x1e2>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e002      	b.n	8002f92 <HAL_GPIO_Init+0x1e2>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_GPIO_Init+0x1e2>
 8002f90:	2300      	movs	r3, #0
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	f002 0203 	and.w	r2, r2, #3
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	4093      	lsls	r3, r2
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa2:	4937      	ldr	r1, [pc, #220]	@ (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb0:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ffe:	4a24      	ldr	r2, [pc, #144]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003004:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003028:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800302e:	4b18      	ldr	r3, [pc, #96]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003052:	4a0f      	ldr	r2, [pc, #60]	@ (8003090 <HAL_GPIO_Init+0x2e0>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f aea9 	bne.w	8002dc0 <HAL_GPIO_Init+0x10>
  }
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800
 800308c:	48000c00 	.word	0x48000c00
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e08d      	b.n	80031f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fc9c 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	e006      	b.n	800314c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800314a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d108      	bne.n	8003166 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e007      	b.n	8003176 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003188:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003198:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69d9      	ldr	r1, [r3, #28]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003218:	2b28      	cmp	r3, #40	@ 0x28
 800321a:	f040 8098 	bne.w	800334e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e08c      	b.n	8003350 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003236:	f248 0101 	movw	r1, #32769	@ 0x8001
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f001 fbd0 	bl	80049e0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800324a:	2302      	movs	r3, #2
 800324c:	e080      	b.n	8003350 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003260:	d12a      	bne.n	80032b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003262:	2102      	movs	r1, #2
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f001 fbbb 	bl	80049e0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003278:	d11e      	bne.n	80032b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003288:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003298:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fd3b 	bl	8002d1a <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2229      	movs	r2, #41	@ 0x29
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032dc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80032fe:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2208      	movs	r2, #8
 8003336:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003340:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f001 fac7 	bl	80048d8 <I2C_Enable_IRQ>

    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08004837 	.word	0x08004837
 800335c:	0800366b 	.word	0x0800366b

08003360 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800337c:	2b28      	cmp	r3, #40	@ 0x28
 800337e:	f040 8098 	bne.w	80034b2 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e08c      	b.n	80034b4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800339a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f001 fb1e 	bl	80049e0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e080      	b.n	80034b4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b29      	cmp	r3, #41	@ 0x29
 80033c4:	d12a      	bne.n	800341c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033c6:	2101      	movs	r1, #1
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f001 fb09 	bl	80049e0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033dc:	d11e      	bne.n	800341c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033ec:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	4a30      	ldr	r2, [pc, #192]	@ (80034bc <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fc89 	bl	8002d1a <HAL_DMA_Abort_IT>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	222a      	movs	r2, #42	@ 0x2a
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003440:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003462:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2208      	movs	r2, #8
 800349a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80034a4:	f248 0102 	movw	r1, #32770	@ 0x8002
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f001 fa15 	bl	80048d8 <I2C_Enable_IRQ>

    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	08004837 	.word	0x08004837
 80034c0:	0800366b 	.word	0x0800366b

080034c4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d10d      	bne.n	80034f4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2228      	movs	r2, #40	@ 0x28
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <HAL_I2C_EnableListen_IT+0x3c>)
 80034e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f001 f9f4 	bl	80048d8 <I2C_Enable_IRQ>

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	0800366b 	.word	0x0800366b

08003504 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003578:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00f      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f043 0208 	orr.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00f      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f043 0202 	orr.w	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 030b 	and.w	r3, r3, #11
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 ffed 	bl	80045c0 <I2C_ITError>
  }
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <I2C_Slave_ISR_IT+0x24>
 800368a:	2302      	movs	r3, #2
 800368c:	e0e2      	b.n	8003854 <I2C_Slave_ISR_IT+0x1ea>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036aa:	6939      	ldr	r1, [r7, #16]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fdcf 	bl	8004250 <I2C_ITSlaveCplt>
 80036b2:	e0ca      	b.n	800384a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04b      	beq.n	8003756 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d046      	beq.n	8003756 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d128      	bne.n	8003724 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b28      	cmp	r3, #40	@ 0x28
 80036dc:	d108      	bne.n	80036f0 <I2C_Slave_ISR_IT+0x86>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036e4:	d104      	bne.n	80036f0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 ff15 	bl	8004518 <I2C_ITListenCplt>
 80036ee:	e031      	b.n	8003754 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b29      	cmp	r3, #41	@ 0x29
 80036fa:	d10e      	bne.n	800371a <I2C_Slave_ISR_IT+0xb0>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003702:	d00a      	beq.n	800371a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2210      	movs	r2, #16
 800370a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f001 f86e 	bl	80047ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fc78 	bl	8004008 <I2C_ITSlaveSeqCplt>
 8003718:	e01c      	b.n	8003754 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2210      	movs	r2, #16
 8003720:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003722:	e08f      	b.n	8003844 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	f043 0204 	orr.w	r2, r3, #4
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <I2C_Slave_ISR_IT+0xdc>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003744:	d17e      	bne.n	8003844 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4619      	mov	r1, r3
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 ff37 	bl	80045c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003752:	e077      	b.n	8003844 <I2C_Slave_ISR_IT+0x1da>
 8003754:	e076      	b.n	8003844 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02f      	beq.n	80037c0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02a      	beq.n	80037c0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d14b      	bne.n	8003848 <I2C_Slave_ISR_IT+0x1de>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037b6:	d047      	beq.n	8003848 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fc25 	bl	8004008 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037be:	e043      	b.n	8003848 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037d4:	6939      	ldr	r1, [r7, #16]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb55 	bl	8003e86 <I2C_ITAddrCplt>
 80037dc:	e035      	b.n	800384a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d030      	beq.n	800384a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02b      	beq.n	800384a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d018      	beq.n	800382e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800382c:	e00d      	b.n	800384a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003834:	d002      	beq.n	800383c <I2C_Slave_ISR_IT+0x1d2>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fbe3 	bl	8004008 <I2C_ITSlaveSeqCplt>
 8003842:	e002      	b.n	800384a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003848:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <I2C_Master_ISR_DMA+0x1a>
 8003872:	2302      	movs	r3, #2
 8003874:	e0e7      	b.n	8003a46 <I2C_Master_ISR_DMA+0x1ea>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2210      	movs	r2, #16
 8003898:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80038a6:	2120      	movs	r1, #32
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f001 f815 	bl	80048d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 ff9d 	bl	80047ee <I2C_Flush_TXDR>
 80038b4:	e0c2      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07f      	beq.n	80039c0 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d07a      	beq.n	80039c0 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05c      	beq.n	800399e <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2bff      	cmp	r3, #255	@ 0xff
 80038fa:	d914      	bls.n	8003926 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d103      	bne.n	8003918 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003916:	e002      	b.n	800391e <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	22ff      	movs	r2, #255	@ 0xff
 800391c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800391e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e010      	b.n	8003948 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003938:	d003      	beq.n	8003942 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e002      	b.n	8003948 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003946:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8a79      	ldrh	r1, [r7, #18]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 ff8c 	bl	8004874 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b22      	cmp	r3, #34	@ 0x22
 8003978:	d108      	bne.n	800398c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003988:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800398a:	e057      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800399a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800399c:	e04e      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039ac:	d003      	beq.n	80039b6 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 faed 	bl	8003f8e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80039b4:	e042      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80039b6:	2140      	movs	r1, #64	@ 0x40
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fe01 	bl	80045c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80039be:	e03d      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d028      	beq.n	8003a1c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d119      	bne.n	8003a12 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039ec:	d025      	beq.n	8003a3a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039f6:	d108      	bne.n	8003a0a <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a06:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003a08:	e017      	b.n	8003a3a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fabf 	bl	8003f8e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003a10:	e013      	b.n	8003a3a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a12:	2140      	movs	r1, #64	@ 0x40
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fdd3 	bl	80045c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a1a:	e00e      	b.n	8003a3a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb44 	bl	80040c0 <I2C_ITMasterCplt>
 8003a38:	e000      	b.n	8003a3c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8003a3a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003a5c:	4b90      	ldr	r3, [pc, #576]	@ (8003ca0 <I2C_Mem_ISR_DMA+0x250>)
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <I2C_Mem_ISR_DMA+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e12f      	b.n	8003cce <I2C_Mem_ISR_DMA+0x27e>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 ff19 	bl	80048d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fea1 	bl	80047ee <I2C_Flush_TXDR>
 8003aac:	e10a      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ad2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ad4:	e0f6      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d06d      	beq.n	8003bbc <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d068      	beq.n	8003bbc <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003aea:	2101      	movs	r1, #1
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 ff77 	bl	80049e0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003af2:	2110      	movs	r1, #16
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 feef 	bl	80048d8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d056      	beq.n	8003bb2 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2bff      	cmp	r3, #255	@ 0xff
 8003b0c:	d91e      	bls.n	8003b4c <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d103      	bne.n	8003b2a <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b28:	e002      	b.n	8003b30 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22ff      	movs	r2, #255	@ 0xff
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	b299      	uxth	r1, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fe95 	bl	8004874 <I2C_TransferConfig>
 8003b4a:	e011      	b.n	8003b70 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	b299      	uxth	r1, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fe82 	bl	8004874 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b22      	cmp	r3, #34	@ 0x22
 8003b8c:	d108      	bne.n	8003ba0 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b9e:	e091      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003bb0:	e088      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bb2:	2140      	movs	r1, #64	@ 0x40
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fd03 	bl	80045c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003bba:	e083      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d070      	beq.n	8003ca8 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d06b      	beq.n	8003ca8 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 ff04 	bl	80049e0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003bd8:	2110      	movs	r1, #16
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fe7c 	bl	80048d8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b22      	cmp	r3, #34	@ 0x22
 8003bea:	d101      	bne.n	8003bf0 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <I2C_Mem_ISR_DMA+0x254>)
 8003bee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2bff      	cmp	r3, #255	@ 0xff
 8003bf8:	d91e      	bls.n	8003c38 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d103      	bne.n	8003c16 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c14:	e002      	b.n	8003c1c <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	22ff      	movs	r2, #255	@ 0xff
 8003c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	b299      	uxth	r1, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fe1f 	bl	8004874 <I2C_TransferConfig>
 8003c36:	e011      	b.n	8003c5c <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	b299      	uxth	r1, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fe0c 	bl	8004874 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b22      	cmp	r3, #34	@ 0x22
 8003c78:	d108      	bne.n	8003c8c <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c88:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c8a:	e01b      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c9a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c9c:	e012      	b.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
 8003c9e:	bf00      	nop
 8003ca0:	80002000 	.word	0x80002000
 8003ca4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9fe 	bl	80040c0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop

08003cd8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <I2C_Slave_ISR_DMA+0x24>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0c0      	b.n	8003e7e <I2C_Slave_ISR_DMA+0x1a6>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa98 	bl	8004250 <I2C_ITSlaveCplt>
 8003d20:	e0a8      	b.n	8003e74 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8095 	beq.w	8003e58 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 808f 	beq.w	8003e58 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d07d      	beq.n	8003e4a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00c      	beq.n	8003d92 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d128      	bne.n	8003dea <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b28      	cmp	r3, #40	@ 0x28
 8003da2:	d108      	bne.n	8003db6 <I2C_Slave_ISR_DMA+0xde>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003daa:	d104      	bne.n	8003db6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fbb2 	bl	8004518 <I2C_ITListenCplt>
 8003db4:	e048      	b.n	8003e48 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b29      	cmp	r3, #41	@ 0x29
 8003dc0:	d10e      	bne.n	8003de0 <I2C_Slave_ISR_DMA+0x108>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc8:	d00a      	beq.n	8003de0 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fd0b 	bl	80047ee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f915 	bl	8004008 <I2C_ITSlaveSeqCplt>
 8003dde:	e033      	b.n	8003e48 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2210      	movs	r2, #16
 8003de6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003de8:	e034      	b.n	8003e54 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2210      	movs	r2, #16
 8003df0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f043 0204 	orr.w	r2, r3, #4
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <I2C_Slave_ISR_DMA+0x13c>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e12:	d11f      	bne.n	8003e54 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b21      	cmp	r3, #33	@ 0x21
 8003e18:	d002      	beq.n	8003e20 <I2C_Slave_ISR_DMA+0x148>
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b29      	cmp	r3, #41	@ 0x29
 8003e1e:	d103      	bne.n	8003e28 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2221      	movs	r2, #33	@ 0x21
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e26:	e008      	b.n	8003e3a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b22      	cmp	r3, #34	@ 0x22
 8003e2c:	d002      	beq.n	8003e34 <I2C_Slave_ISR_DMA+0x15c>
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e32:	d102      	bne.n	8003e3a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2222      	movs	r2, #34	@ 0x22
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fbbd 	bl	80045c0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003e46:	e005      	b.n	8003e54 <I2C_Slave_ISR_DMA+0x17c>
 8003e48:	e004      	b.n	8003e54 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e52:	e00f      	b.n	8003e74 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8003e54:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e56:	e00d      	b.n	8003e74 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f809 	bl	8003e86 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e9c:	2b28      	cmp	r3, #40	@ 0x28
 8003e9e:	d16a      	bne.n	8003f76 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003ebe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ecc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003eda:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d138      	bne.n	8003f56 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	89bb      	ldrh	r3, [r7, #12]
 8003eec:	4053      	eors	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f003 0306 	and.w	r3, r3, #6
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11c      	bne.n	8003f32 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d13b      	bne.n	8003f86 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f24:	89ba      	ldrh	r2, [r7, #12]
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd f834 	bl	8000f98 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f30:	e029      	b.n	8003f86 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd50 	bl	80049e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f48:	89ba      	ldrh	r2, [r7, #12]
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd f822 	bl	8000f98 <HAL_I2C_AddrCallback>
}
 8003f54:	e017      	b.n	8003f86 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fd40 	bl	80049e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f68:	89ba      	ldrh	r2, [r7, #12]
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd f812 	bl	8000f98 <HAL_I2C_AddrCallback>
}
 8003f74:	e007      	b.n	8003f86 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b21      	cmp	r3, #33	@ 0x21
 8003fa8:	d115      	bne.n	8003fd6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2211      	movs	r2, #17
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fd0d 	bl	80049e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fb0d 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fd4:	e014      	b.n	8004000 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2212      	movs	r2, #18
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fea:	2102      	movs	r1, #2
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fcf7 	bl	80049e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fb01 	bl	8003602 <HAL_I2C_MasterRxCpltCallback>
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00c      	b.n	8004056 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004054:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b29      	cmp	r3, #41	@ 0x29
 8004060:	d112      	bne.n	8004088 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2228      	movs	r2, #40	@ 0x28
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2221      	movs	r2, #33	@ 0x21
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004070:	2101      	movs	r1, #1
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fcb4 	bl	80049e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fd f819 	bl	80010b8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004086:	e017      	b.n	80040b8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b2a      	cmp	r3, #42	@ 0x2a
 8004092:	d111      	bne.n	80040b8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2228      	movs	r2, #40	@ 0x28
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2222      	movs	r2, #34	@ 0x22
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040a2:	2102      	movs	r1, #2
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fc9b 	bl	80049e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc ffc8 	bl	8001048 <HAL_I2C_SlaveRxCpltCallback>
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2220      	movs	r2, #32
 80040d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b21      	cmp	r3, #33	@ 0x21
 80040e0:	d107      	bne.n	80040f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040e2:	2101      	movs	r1, #1
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fc7b 	bl	80049e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2211      	movs	r2, #17
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f0:	e00c      	b.n	800410c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	@ 0x22
 80040fc:	d106      	bne.n	800410c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040fe:	2102      	movs	r1, #2
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fc6d 	bl	80049e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2212      	movs	r2, #18
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b4c      	ldr	r3, [pc, #304]	@ (8004248 <I2C_ITMasterCplt+0x188>)
 8004118:	400b      	ands	r3, r1
 800411a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a49      	ldr	r2, [pc, #292]	@ (800424c <I2C_ITMasterCplt+0x18c>)
 8004126:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b60      	cmp	r3, #96	@ 0x60
 8004150:	d10a      	bne.n	8004168 <I2C_ITMasterCplt+0xa8>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2db      	uxtb	r3, r3
 8004164:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004166:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb40 	bl	80047ee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b60      	cmp	r3, #96	@ 0x60
 800417e:	d002      	beq.n	8004186 <I2C_ITMasterCplt+0xc6>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa17 	bl	80045c0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004192:	e054      	b.n	800423e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b21      	cmp	r3, #33	@ 0x21
 800419e:	d124      	bne.n	80041ea <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d10b      	bne.n	80041d2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fa23 	bl	8003616 <HAL_I2C_MemTxCpltCallback>
}
 80041d0:	e035      	b.n	800423e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fa03 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
}
 80041e8:	e029      	b.n	800423e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b22      	cmp	r3, #34	@ 0x22
 80041f4:	d123      	bne.n	800423e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d10b      	bne.n	8004228 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fa02 	bl	800362a <HAL_I2C_MemRxCpltCallback>
}
 8004226:	e00a      	b.n	800423e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff f9e2 	bl	8003602 <HAL_I2C_MasterRxCpltCallback>
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	fe00e800 	.word	0xfe00e800
 800424c:	ffff0000 	.word	0xffff0000

08004250 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004272:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2220      	movs	r2, #32
 800427a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800427c:	7afb      	ldrb	r3, [r7, #11]
 800427e:	2b21      	cmp	r3, #33	@ 0x21
 8004280:	d002      	beq.n	8004288 <I2C_ITSlaveCplt+0x38>
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	2b29      	cmp	r3, #41	@ 0x29
 8004286:	d108      	bne.n	800429a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004288:	f248 0101 	movw	r1, #32769	@ 0x8001
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fba7 	bl	80049e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2221      	movs	r2, #33	@ 0x21
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
 8004298:	e019      	b.n	80042ce <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	2b22      	cmp	r3, #34	@ 0x22
 800429e:	d002      	beq.n	80042a6 <I2C_ITSlaveCplt+0x56>
 80042a0:	7afb      	ldrb	r3, [r7, #11]
 80042a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a4:	d108      	bne.n	80042b8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042a6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb98 	bl	80049e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2222      	movs	r2, #34	@ 0x22
 80042b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b6:	e00a      	b.n	80042ce <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	2b28      	cmp	r3, #40	@ 0x28
 80042bc:	d107      	bne.n	80042ce <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80042be:	f248 0103 	movw	r1, #32771	@ 0x8003
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fb8c 	bl	80049e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042dc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b89      	ldr	r3, [pc, #548]	@ (8004510 <I2C_ITSlaveCplt+0x2c0>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa7d 	bl	80047ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d013      	beq.n	8004326 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800430c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01f      	beq.n	8004356 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004324:	e017      	b.n	8004356 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800433e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00c      	beq.n	80043a2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	f043 0204 	orr.w	r2, r3, #4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d049      	beq.n	8004456 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d044      	beq.n	8004456 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d128      	bne.n	8004428 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b28      	cmp	r3, #40	@ 0x28
 80043e0:	d108      	bne.n	80043f4 <I2C_ITSlaveCplt+0x1a4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e8:	d104      	bne.n	80043f4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80043ea:	6979      	ldr	r1, [r7, #20]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f893 	bl	8004518 <I2C_ITListenCplt>
 80043f2:	e030      	b.n	8004456 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b29      	cmp	r3, #41	@ 0x29
 80043fe:	d10e      	bne.n	800441e <I2C_ITSlaveCplt+0x1ce>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004406:	d00a      	beq.n	800441e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2210      	movs	r2, #16
 800440e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9ec 	bl	80047ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fdf6 	bl	8004008 <I2C_ITSlaveSeqCplt>
 800441c:	e01b      	b.n	8004456 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2210      	movs	r2, #16
 8004424:	61da      	str	r2, [r3, #28]
 8004426:	e016      	b.n	8004456 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <I2C_ITSlaveCplt+0x1fa>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004448:	d105      	bne.n	8004456 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8b5 	bl	80045c0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8a4 	bl	80045c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b28      	cmp	r3, #40	@ 0x28
 8004482:	d141      	bne.n	8004508 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004484:	6979      	ldr	r1, [r7, #20]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f846 	bl	8004518 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800448c:	e03c      	b.n	8004508 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004496:	d014      	beq.n	80044c2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fdb5 	bl	8004008 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <I2C_ITSlaveCplt+0x2c4>)
 80044a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fd60 	bl	8000f80 <HAL_I2C_ListenCpltCallback>
}
 80044c0:	e022      	b.n	8004508 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b22      	cmp	r3, #34	@ 0x22
 80044cc:	d10e      	bne.n	80044ec <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc fdaf 	bl	8001048 <HAL_I2C_SlaveRxCpltCallback>
}
 80044ea:	e00d      	b.n	8004508 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fdd8 	bl	80010b8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	fe00e800 	.word	0xfe00e800
 8004514:	ffff0000 	.word	0xffff0000

08004518 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a25      	ldr	r2, [pc, #148]	@ (80045bc <I2C_ITListenCplt+0xa4>)
 8004526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d022      	beq.n	8004594 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004594:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fa21 	bl	80049e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2210      	movs	r2, #16
 80045a4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fce6 	bl	8000f80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	ffff0000 	.word	0xffff0000

080045c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004794 <I2C_ITError+0x1d4>)
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b28      	cmp	r3, #40	@ 0x28
 80045f6:	d005      	beq.n	8004604 <I2C_ITError+0x44>
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b29      	cmp	r3, #41	@ 0x29
 80045fc:	d002      	beq.n	8004604 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b2a      	cmp	r3, #42	@ 0x2a
 8004602:	d10b      	bne.n	800461c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004604:	2103      	movs	r1, #3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9ea 	bl	80049e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2228      	movs	r2, #40	@ 0x28
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a60      	ldr	r2, [pc, #384]	@ (8004798 <I2C_ITError+0x1d8>)
 8004618:	635a      	str	r2, [r3, #52]	@ 0x34
 800461a:	e030      	b.n	800467e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800461c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f9dd 	bl	80049e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8e1 	bl	80047ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b60      	cmp	r3, #96	@ 0x60
 8004636:	d01f      	beq.n	8004678 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	d114      	bne.n	8004678 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d109      	bne.n	8004670 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2210      	movs	r2, #16
 8004662:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2220      	movs	r2, #32
 8004676:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d039      	beq.n	8004700 <I2C_ITError+0x140>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b11      	cmp	r3, #17
 8004690:	d002      	beq.n	8004698 <I2C_ITError+0xd8>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b21      	cmp	r3, #33	@ 0x21
 8004696:	d133      	bne.n	8004700 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a6:	d107      	bne.n	80046b8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fb6a 	bl	8002d96 <HAL_DMA_GetState>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d017      	beq.n	80046f8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	4a33      	ldr	r2, [pc, #204]	@ (800479c <I2C_ITError+0x1dc>)
 80046ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fb1c 	bl	8002d1a <HAL_DMA_Abort_IT>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04d      	beq.n	8004784 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046f2:	4610      	mov	r0, r2
 80046f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f6:	e045      	b.n	8004784 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f851 	bl	80047a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046fe:	e041      	b.n	8004784 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d039      	beq.n	800477c <I2C_ITError+0x1bc>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b12      	cmp	r3, #18
 800470c:	d002      	beq.n	8004714 <I2C_ITError+0x154>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b22      	cmp	r3, #34	@ 0x22
 8004712:	d133      	bne.n	800477c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004722:	d107      	bne.n	8004734 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004732:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fb2c 	bl	8002d96 <HAL_DMA_GetState>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d017      	beq.n	8004774 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <I2C_ITError+0x1dc>)
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fade 	bl	8002d1a <HAL_DMA_Abort_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d011      	beq.n	8004788 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800476e:	4610      	mov	r0, r2
 8004770:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004772:	e009      	b.n	8004788 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f813 	bl	80047a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800477a:	e005      	b.n	8004788 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f80f 	bl	80047a0 <I2C_TreatErrorCallback>
  }
}
 8004782:	e002      	b.n	800478a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004788:	bf00      	nop
}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	ffff0000 	.word	0xffff0000
 8004798:	0800366b 	.word	0x0800366b
 800479c:	08004837 	.word	0x08004837

080047a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d10e      	bne.n	80047d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe ff37 	bl	800363e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d0:	e009      	b.n	80047e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc fc97 	bl	8001114 <HAL_I2C_ErrorCallback>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d103      	bne.n	800480c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d007      	beq.n	800482a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	619a      	str	r2, [r3, #24]
  }
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	2200      	movs	r2, #0
 8004852:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	2200      	movs	r2, #0
 8004862:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff9b 	bl	80047a0 <I2C_TreatErrorCallback>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	817b      	strh	r3, [r7, #10]
 8004882:	4613      	mov	r3, r2
 8004884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800488c:	7a7b      	ldrb	r3, [r7, #9]
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	4313      	orrs	r3, r2
 800489e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	0d5b      	lsrs	r3, r3, #21
 80048ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048b2:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <I2C_TransferConfig+0x60>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	43db      	mvns	r3, r3
 80048b8:	ea02 0103 	and.w	r1, r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	03ff63ff 	.word	0x03ff63ff

080048d8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	4a39      	ldr	r2, [pc, #228]	@ (80049d4 <I2C_Enable_IRQ+0xfc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d032      	beq.n	8004958 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80048f6:	4a38      	ldr	r2, [pc, #224]	@ (80049d8 <I2C_Enable_IRQ+0x100>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d02d      	beq.n	8004958 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004900:	4a36      	ldr	r2, [pc, #216]	@ (80049dc <I2C_Enable_IRQ+0x104>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d028      	beq.n	8004958 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004906:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	da03      	bge.n	8004916 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004914:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004926:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004938:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800493a:	887b      	ldrh	r3, [r7, #2]
 800493c:	2b10      	cmp	r3, #16
 800493e:	d103      	bne.n	8004948 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004946:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004948:	887b      	ldrh	r3, [r7, #2]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d133      	bne.n	80049b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f043 0320 	orr.w	r3, r3, #32
 8004954:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004956:	e02e      	b.n	80049b6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da03      	bge.n	8004968 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004966:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004978:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800498a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	2b10      	cmp	r3, #16
 8004990:	d103      	bne.n	800499a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004998:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	2b20      	cmp	r3, #32
 800499e:	d103      	bne.n	80049a8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	2b40      	cmp	r3, #64	@ 0x40
 80049ac:	d103      	bne.n	80049b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	0800385d 	.word	0x0800385d
 80049d8:	08003cd9 	.word	0x08003cd9
 80049dc:	08003a51 	.word	0x08003a51

080049e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00f      	beq.n	8004a1a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004a00:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a0e:	2b28      	cmp	r3, #40	@ 0x28
 8004a10:	d003      	beq.n	8004a1a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004a2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a38:	2b28      	cmp	r3, #40	@ 0x28
 8004a3a:	d003      	beq.n	8004a44 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a42:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	da03      	bge.n	8004a54 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d103      	bne.n	8004a62 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d103      	bne.n	8004a70 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f043 0320 	orr.w	r3, r3, #32
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	2b40      	cmp	r3, #64	@ 0x40
 8004a74:	d103      	bne.n	8004a7e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43da      	mvns	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d138      	bne.n	8004b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e032      	b.n	8004b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2224      	movs	r2, #36	@ 0x24
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d139      	bne.n	8004bbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e033      	b.n	8004bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2224      	movs	r2, #36	@ 0x24
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bdc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f001 b823 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 817d 	beq.w	8004f02 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c08:	4bbc      	ldr	r3, [pc, #752]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c14:	4bb9      	ldr	r3, [pc, #740]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d15c      	bne.n	8004cda <HAL_RCC_OscConfig+0x10e>
 8004c20:	4bb6      	ldr	r3, [pc, #728]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2c:	d155      	bne.n	8004cda <HAL_RCC_OscConfig+0x10e>
 8004c2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c32:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_RCC_OscConfig+0x94>
 8004c5a:	4ba8      	ldr	r3, [pc, #672]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	e015      	b.n	8004c8c <HAL_RCC_OscConfig+0xc0>
 8004c60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c64:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004c7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004c88:	4b9c      	ldr	r3, [pc, #624]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c90:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004c94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004c98:	fa92 f2a2 	rbit	r2, r2
 8004c9c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004ca0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004ca4:	fab2 f282 	clz	r2, r2
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	f042 0220 	orr.w	r2, r2, #32
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	f002 021f 	and.w	r2, r2, #31
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 811f 	beq.w	8004f00 <HAL_RCC_OscConfig+0x334>
 8004cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 8116 	bne.w	8004f00 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f000 bfaf 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x12e>
 8004cec:	4b83      	ldr	r3, [pc, #524]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a82      	ldr	r2, [pc, #520]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e036      	b.n	8004d68 <HAL_RCC_OscConfig+0x19c>
 8004cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x158>
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7b      	ldr	r2, [pc, #492]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b79      	ldr	r3, [pc, #484]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a78      	ldr	r2, [pc, #480]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e021      	b.n	8004d68 <HAL_RCC_OscConfig+0x19c>
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x184>
 8004d36:	4b71      	ldr	r3, [pc, #452]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a70      	ldr	r2, [pc, #448]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b6e      	ldr	r3, [pc, #440]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6d      	ldr	r2, [pc, #436]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x19c>
 8004d50:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a69      	ldr	r2, [pc, #420]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b67      	ldr	r3, [pc, #412]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a66      	ldr	r2, [pc, #408]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d68:	4b64      	ldr	r3, [pc, #400]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	f023 020f 	bic.w	r2, r3, #15
 8004d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	495f      	ldr	r1, [pc, #380]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d059      	beq.n	8004e46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd f845 	bl	8001e20 <HAL_GetTick>
 8004d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd f840 	bl	8001e20 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b64      	cmp	r3, #100	@ 0x64
 8004daa:	d902      	bls.n	8004db2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	f000 bf43 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 8004db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004db6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004dc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCC_OscConfig+0x218>
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	e015      	b.n	8004e10 <HAL_RCC_OscConfig+0x244>
 8004de4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004de8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dfc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004e00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e14:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004e18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004e1c:	fa92 f2a2 	rbit	r2, r2
 8004e20:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004e24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	f042 0220 	orr.w	r2, r2, #32
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f002 021f 	and.w	r2, r2, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ab      	beq.n	8004d9c <HAL_RCC_OscConfig+0x1d0>
 8004e44:	e05d      	b.n	8004f02 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fc ffeb 	bl	8001e20 <HAL_GetTick>
 8004e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fc ffe6 	bl	8001e20 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	@ 0x64
 8004e5e:	d902      	bls.n	8004e66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	f000 bee9 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 8004e66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e6a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004e72:	fa93 f3a3 	rbit	r3, r3
 8004e76:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004e7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_RCC_OscConfig+0x2cc>
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	e015      	b.n	8004ec4 <HAL_RCC_OscConfig+0x2f8>
 8004e98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004eb0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004eb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <HAL_RCC_OscConfig+0x330>)
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ec8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004ecc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004ed0:	fa92 f2a2 	rbit	r2, r2
 8004ed4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004ed8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004edc:	fab2 f282 	clz	r2, r2
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	f042 0220 	orr.w	r2, r2, #32
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	f002 021f 	and.w	r2, r2, #31
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ab      	bne.n	8004e50 <HAL_RCC_OscConfig+0x284>
 8004ef8:	e003      	b.n	8004f02 <HAL_RCC_OscConfig+0x336>
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 817d 	beq.w	8005212 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f18:	4ba6      	ldr	r3, [pc, #664]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f24:	4ba3      	ldr	r3, [pc, #652]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d172      	bne.n	8005016 <HAL_RCC_OscConfig+0x44a>
 8004f30:	4ba0      	ldr	r3, [pc, #640]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d16c      	bne.n	8005016 <HAL_RCC_OscConfig+0x44a>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004f4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <HAL_RCC_OscConfig+0x3a0>
 8004f66:	4b93      	ldr	r3, [pc, #588]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	e013      	b.n	8004f94 <HAL_RCC_OscConfig+0x3c8>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004f84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004f90:	4b88      	ldr	r3, [pc, #544]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2202      	movs	r2, #2
 8004f96:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004f9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004f9e:	fa92 f2a2 	rbit	r2, r2
 8004fa2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004fa6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004faa:	fab2 f282 	clz	r2, r2
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	f042 0220 	orr.w	r2, r2, #32
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	f002 021f 	and.w	r2, r2, #31
 8004fba:	2101      	movs	r1, #1
 8004fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCC_OscConfig+0x410>
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f000 be2e 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b75      	ldr	r3, [pc, #468]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	21f8      	movs	r1, #248	@ 0xf8
 8004ff2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004ffa:	fa91 f1a1 	rbit	r1, r1
 8004ffe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005002:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005006:	fab1 f181 	clz	r1, r1
 800500a:	b2c9      	uxtb	r1, r1
 800500c:	408b      	lsls	r3, r1
 800500e:	4969      	ldr	r1, [pc, #420]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005014:	e0fd      	b.n	8005212 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8088 	beq.w	8005138 <HAL_RCC_OscConfig+0x56c>
 8005028:	2301      	movs	r3, #1
 800502a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800503a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005048:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	461a      	mov	r2, r3
 8005050:	2301      	movs	r3, #1
 8005052:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fee4 	bl	8001e20 <HAL_GetTick>
 8005058:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505e:	f7fc fedf 	bl	8001e20 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d902      	bls.n	8005074 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	f000 bde2 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 8005074:	2302      	movs	r3, #2
 8005076:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005086:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4d8>
 800509e:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	e013      	b.n	80050cc <HAL_RCC_OscConfig+0x500>
 80050a4:	2302      	movs	r3, #2
 80050a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80050ae:	fa93 f3a3 	rbit	r3, r3
 80050b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80050b6:	2302      	movs	r3, #2
 80050b8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80050bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80050c8:	4b3a      	ldr	r3, [pc, #232]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	2202      	movs	r2, #2
 80050ce:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80050d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80050d6:	fa92 f2a2 	rbit	r2, r2
 80050da:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80050de:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80050e2:	fab2 f282 	clz	r2, r2
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f002 021f 	and.w	r2, r2, #31
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f202 	lsl.w	r2, r1, r2
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0af      	beq.n	800505e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b2d      	ldr	r3, [pc, #180]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	21f8      	movs	r1, #248	@ 0xf8
 8005114:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800511c:	fa91 f1a1 	rbit	r1, r1
 8005120:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005124:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005128:	fab1 f181 	clz	r1, r1
 800512c:	b2c9      	uxtb	r1, r1
 800512e:	408b      	lsls	r3, r1
 8005130:	4920      	ldr	r1, [pc, #128]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
 8005136:	e06c      	b.n	8005212 <HAL_RCC_OscConfig+0x646>
 8005138:	2301      	movs	r3, #1
 800513a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800514a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005158:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fc fe5c 	bl	8001e20 <HAL_GetTick>
 8005168:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516e:	f7fc fe57 	bl	8001e20 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d902      	bls.n	8005184 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	f000 bd5a 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 8005184:	2302      	movs	r3, #2
 8005186:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d104      	bne.n	80051b8 <HAL_RCC_OscConfig+0x5ec>
 80051ae:	4b01      	ldr	r3, [pc, #4]	@ (80051b4 <HAL_RCC_OscConfig+0x5e8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e015      	b.n	80051e0 <HAL_RCC_OscConfig+0x614>
 80051b4:	40021000 	.word	0x40021000
 80051b8:	2302      	movs	r3, #2
 80051ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051c2:	fa93 f3a3 	rbit	r3, r3
 80051c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80051ca:	2302      	movs	r3, #2
 80051cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80051d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051d4:	fa93 f3a3 	rbit	r3, r3
 80051d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80051dc:	4bc8      	ldr	r3, [pc, #800]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	2202      	movs	r2, #2
 80051e2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80051e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80051ea:	fa92 f2a2 	rbit	r2, r2
 80051ee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80051f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80051f6:	fab2 f282 	clz	r2, r2
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	f042 0220 	orr.w	r2, r2, #32
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	f002 021f 	and.w	r2, r2, #31
 8005206:	2101      	movs	r1, #1
 8005208:	fa01 f202 	lsl.w	r2, r1, r2
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ad      	bne.n	800516e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8110 	beq.w	8005448 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800522c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d079      	beq.n	800532c <HAL_RCC_OscConfig+0x760>
 8005238:	2301      	movs	r3, #1
 800523a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	4bab      	ldr	r3, [pc, #684]	@ (8005504 <HAL_RCC_OscConfig+0x938>)
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	461a      	mov	r2, r3
 800525e:	2301      	movs	r3, #1
 8005260:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005262:	f7fc fddd 	bl	8001e20 <HAL_GetTick>
 8005266:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526c:	f7fc fdd8 	bl	8001e20 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d902      	bls.n	8005282 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	f000 bcdb 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 8005282:	2302      	movs	r3, #2
 8005284:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800528c:	fa93 f3a3 	rbit	r3, r3
 8005290:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005298:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800529c:	2202      	movs	r2, #2
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	fa93 f2a3 	rbit	r2, r3
 80052ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c0:	2202      	movs	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	fa93 f2a3 	rbit	r2, r3
 80052d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052dc:	4b88      	ldr	r3, [pc, #544]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 80052de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80052e8:	2102      	movs	r1, #2
 80052ea:	6019      	str	r1, [r3, #0]
 80052ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	fa93 f1a3 	rbit	r1, r3
 80052fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005302:	6019      	str	r1, [r3, #0]
  return result;
 8005304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005308:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2101      	movs	r1, #1
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0a0      	beq.n	800526c <HAL_RCC_OscConfig+0x6a0>
 800532a:	e08d      	b.n	8005448 <HAL_RCC_OscConfig+0x87c>
 800532c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005330:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	fa93 f2a3 	rbit	r2, r3
 8005346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800534a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800534e:	601a      	str	r2, [r3, #0]
  return result;
 8005350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005354:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005358:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	4b68      	ldr	r3, [pc, #416]	@ (8005504 <HAL_RCC_OscConfig+0x938>)
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fc fd57 	bl	8001e20 <HAL_GetTick>
 8005372:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005378:	f7fc fd52 	bl	8001e20 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	f000 bc55 	b.w	8005c38 <HAL_RCC_OscConfig+0x106c>
 800538e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005392:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005396:	2202      	movs	r2, #2
 8005398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	fa93 f2a3 	rbit	r2, r3
 80053a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80053ba:	2202      	movs	r2, #2
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fa93 f2a3 	rbit	r2, r3
 80053cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80053de:	2202      	movs	r2, #2
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	fa93 f2a3 	rbit	r2, r3
 80053f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80053f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053fa:	4b41      	ldr	r3, [pc, #260]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 80053fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005402:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005406:	2102      	movs	r1, #2
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f1a3 	rbit	r1, r3
 8005418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800541c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005420:	6019      	str	r1, [r3, #0]
  return result;
 8005422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005426:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d197      	bne.n	8005378 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800544c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 81a1 	beq.w	80057a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005464:	4b26      	ldr	r3, [pc, #152]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d116      	bne.n	800549e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005470:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	61d3      	str	r3, [r2, #28]
 800547c:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005488:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005492:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005496:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549e:	4b1a      	ldr	r3, [pc, #104]	@ (8005508 <HAL_RCC_OscConfig+0x93c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <HAL_RCC_OscConfig+0x93c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <HAL_RCC_OscConfig+0x93c>)
 80054b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b6:	f7fc fcb3 	bl	8001e20 <HAL_GetTick>
 80054ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054be:	e009      	b.n	80054d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fc fcae 	bl	8001e20 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b64      	cmp	r3, #100	@ 0x64
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e3b1      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <HAL_RCC_OscConfig+0x93c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ef      	beq.n	80054c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10d      	bne.n	800550c <HAL_RCC_OscConfig+0x940>
 80054f0:	4b03      	ldr	r3, [pc, #12]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a02      	ldr	r2, [pc, #8]	@ (8005500 <HAL_RCC_OscConfig+0x934>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6213      	str	r3, [r2, #32]
 80054fc:	e03c      	b.n	8005578 <HAL_RCC_OscConfig+0x9ac>
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	10908120 	.word	0x10908120
 8005508:	40007000 	.word	0x40007000
 800550c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <HAL_RCC_OscConfig+0x96a>
 800551c:	4bc1      	ldr	r3, [pc, #772]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	4ac0      	ldr	r2, [pc, #768]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	6213      	str	r3, [r2, #32]
 8005528:	4bbe      	ldr	r3, [pc, #760]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	4abd      	ldr	r2, [pc, #756]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800552e:	f023 0304 	bic.w	r3, r3, #4
 8005532:	6213      	str	r3, [r2, #32]
 8005534:	e020      	b.n	8005578 <HAL_RCC_OscConfig+0x9ac>
 8005536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800553a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x994>
 8005546:	4bb7      	ldr	r3, [pc, #732]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	4ab6      	ldr	r2, [pc, #728]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	6213      	str	r3, [r2, #32]
 8005552:	4bb4      	ldr	r3, [pc, #720]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	4ab3      	ldr	r2, [pc, #716]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6213      	str	r3, [r2, #32]
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0x9ac>
 8005560:	4bb0      	ldr	r3, [pc, #704]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	4aaf      	ldr	r2, [pc, #700]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6213      	str	r3, [r2, #32]
 800556c:	4bad      	ldr	r3, [pc, #692]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	4aac      	ldr	r2, [pc, #688]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800557c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8081 	beq.w	800568c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558a:	f7fc fc49 	bl	8001e20 <HAL_GetTick>
 800558e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fc fc44 	bl	8001e20 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e345      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
 80055ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80055b4:	2202      	movs	r2, #2
 80055b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	fa93 f2a3 	rbit	r2, r3
 80055c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80055d8:	2202      	movs	r2, #2
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	fa93 f2a3 	rbit	r2, r3
 80055ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80055f2:	601a      	str	r2, [r3, #0]
  return result;
 80055f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80055fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d102      	bne.n	8005618 <HAL_RCC_OscConfig+0xa4c>
 8005612:	4b84      	ldr	r3, [pc, #528]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	e013      	b.n	8005640 <HAL_RCC_OscConfig+0xa74>
 8005618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800561c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005620:	2202      	movs	r2, #2
 8005622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005628:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	fa93 f2a3 	rbit	r2, r3
 8005632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005636:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	4b79      	ldr	r3, [pc, #484]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005644:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005648:	2102      	movs	r1, #2
 800564a:	6011      	str	r1, [r2, #0]
 800564c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005650:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	fa92 f1a2 	rbit	r1, r2
 800565a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800565e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005662:	6011      	str	r1, [r2, #0]
  return result;
 8005664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005668:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	fab2 f282 	clz	r2, r2
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	f002 021f 	and.w	r2, r2, #31
 800567e:	2101      	movs	r1, #1
 8005680:	fa01 f202 	lsl.w	r2, r1, r2
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d084      	beq.n	8005594 <HAL_RCC_OscConfig+0x9c8>
 800568a:	e07f      	b.n	800578c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568c:	f7fc fbc8 	bl	8001e20 <HAL_GetTick>
 8005690:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005694:	e00b      	b.n	80056ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fc fbc3 	bl	8001e20 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e2c4      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
 80056ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80056b6:	2202      	movs	r2, #2
 80056b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	fa93 f2a3 	rbit	r2, r3
 80056c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80056da:	2202      	movs	r2, #2
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80056f4:	601a      	str	r2, [r3, #0]
  return result;
 80056f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80056fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005700:	fab3 f383 	clz	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f043 0302 	orr.w	r3, r3, #2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d102      	bne.n	800571a <HAL_RCC_OscConfig+0xb4e>
 8005714:	4b43      	ldr	r3, [pc, #268]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	e013      	b.n	8005742 <HAL_RCC_OscConfig+0xb76>
 800571a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800571e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005722:	2202      	movs	r2, #2
 8005724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800572a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005738:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005746:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800574a:	2102      	movs	r1, #2
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005752:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	fa92 f1a2 	rbit	r1, r2
 800575c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005760:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005764:	6011      	str	r1, [r2, #0]
  return result;
 8005766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800576a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d184      	bne.n	8005696 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800578c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005790:	2b01      	cmp	r3, #1
 8005792:	d105      	bne.n	80057a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005794:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4a22      	ldr	r2, [pc, #136]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800579e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8242 	beq.w	8005c36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005824 <HAL_RCC_OscConfig+0xc58>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	f000 8213 	beq.w	8005be6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	f040 8162 	bne.w	8005a96 <HAL_RCC_OscConfig+0xeca>
 80057d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80057da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057e4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	fa93 f2a3 	rbit	r2, r3
 80057ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80057f6:	601a      	str	r2, [r3, #0]
  return result;
 80057f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005800:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800580c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc fb02 	bl	8001e20 <HAL_GetTick>
 800581c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005820:	e00c      	b.n	800583c <HAL_RCC_OscConfig+0xc70>
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005828:	f7fc fafa 	bl	8001e20 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e1fd      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
 800583c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005840:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005844:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800584e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	fa93 f2a3 	rbit	r2, r3
 8005858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800585c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005860:	601a      	str	r2, [r3, #0]
  return result;
 8005862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005866:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800586a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d102      	bne.n	8005886 <HAL_RCC_OscConfig+0xcba>
 8005880:	4bb0      	ldr	r3, [pc, #704]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	e027      	b.n	80058d6 <HAL_RCC_OscConfig+0xd0a>
 8005886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800588a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800588e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005898:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	fa93 f2a3 	rbit	r2, r3
 80058a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80058b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	fa93 f2a3 	rbit	r2, r3
 80058c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058da:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80058de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80058e2:	6011      	str	r1, [r2, #0]
 80058e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058e8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	fa92 f1a2 	rbit	r1, r2
 80058f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80058fa:	6011      	str	r1, [r2, #0]
  return result;
 80058fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005900:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	fab2 f282 	clz	r2, r2
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	f042 0220 	orr.w	r2, r2, #32
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	f002 021f 	and.w	r2, r2, #31
 8005916:	2101      	movs	r1, #1
 8005918:	fa01 f202 	lsl.w	r2, r1, r2
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d182      	bne.n	8005828 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005922:	4b88      	ldr	r3, [pc, #544]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800592a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800592e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800593a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	430b      	orrs	r3, r1
 8005944:	497f      	ldr	r1, [pc, #508]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
 800594a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800594e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005952:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800595c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	fa93 f2a3 	rbit	r2, r3
 8005966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800596a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800596e:	601a      	str	r2, [r3, #0]
  return result;
 8005970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005974:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005978:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005984:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	461a      	mov	r2, r3
 800598c:	2301      	movs	r3, #1
 800598e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fc fa46 	bl	8001e20 <HAL_GetTick>
 8005994:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005998:	e009      	b.n	80059ae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599a:	f7fc fa41 	bl	8001e20 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e144      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
 80059ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	fa93 f2a3 	rbit	r2, r3
 80059ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80059d2:	601a      	str	r2, [r3, #0]
  return result;
 80059d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80059dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059de:	fab3 f383 	clz	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <HAL_RCC_OscConfig+0xe2c>
 80059f2:	4b54      	ldr	r3, [pc, #336]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	e027      	b.n	8005a48 <HAL_RCC_OscConfig+0xe7c>
 80059f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a0a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	fa93 f2a3 	rbit	r2, r3
 8005a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a22:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a30:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	fa93 f2a3 	rbit	r2, r3
 8005a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	4b3f      	ldr	r3, [pc, #252]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a4c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005a50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a5a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	fa92 f1a2 	rbit	r1, r2
 8005a64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a68:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a6c:	6011      	str	r1, [r2, #0]
  return result;
 8005a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a72:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	fab2 f282 	clz	r2, r2
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	f042 0220 	orr.w	r2, r2, #32
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	f002 021f 	and.w	r2, r2, #31
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d082      	beq.n	800599a <HAL_RCC_OscConfig+0xdce>
 8005a94:	e0cf      	b.n	8005c36 <HAL_RCC_OscConfig+0x106a>
 8005a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aa8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	fa93 f2a3 	rbit	r2, r3
 8005ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005aba:	601a      	str	r2, [r3, #0]
  return result;
 8005abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005ac4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	fab3 f383 	clz	r3, r3
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ad0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fc f9a0 	bl	8001e20 <HAL_GetTick>
 8005ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae4:	e009      	b.n	8005afa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fc f99b 	bl	8001e20 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e09e      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
 8005afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005afe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005b02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	fa93 f2a3 	rbit	r2, r3
 8005b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005b1e:	601a      	str	r2, [r3, #0]
  return result;
 8005b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b24:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2a:	fab3 f383 	clz	r3, r3
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d104      	bne.n	8005b48 <HAL_RCC_OscConfig+0xf7c>
 8005b3e:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <HAL_RCC_OscConfig+0xf78>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	e029      	b.n	8005b98 <HAL_RCC_OscConfig+0xfcc>
 8005b44:	40021000 	.word	0x40021000
 8005b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b5a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	fa93 f2a3 	rbit	r2, r3
 8005b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b68:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b72:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b80:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	fa93 f2a3 	rbit	r2, r3
 8005b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b8e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_OscConfig+0x1078>)
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b9c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005ba0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005ba4:	6011      	str	r1, [r2, #0]
 8005ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005baa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	fa92 f1a2 	rbit	r1, r2
 8005bb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bb8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005bbc:	6011      	str	r1, [r2, #0]
  return result;
 8005bbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bc2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	fab2 f282 	clz	r2, r2
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	f042 0220 	orr.w	r2, r2, #32
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	f002 021f 	and.w	r2, r2, #31
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f202 	lsl.w	r2, r1, r2
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d180      	bne.n	8005ae6 <HAL_RCC_OscConfig+0xf1a>
 8005be4:	e027      	b.n	8005c36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e01e      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bfa:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <HAL_RCC_OscConfig+0x1078>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005c06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d10b      	bne.n	8005c32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005c1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000

08005c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b09e      	sub	sp, #120	@ 0x78
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e162      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c60:	4b90      	ldr	r3, [pc, #576]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d910      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	498b      	ldr	r1, [pc, #556]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b89      	ldr	r3, [pc, #548]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e14a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b82      	ldr	r3, [pc, #520]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	497f      	ldr	r1, [pc, #508]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80dc 	beq.w	8005e74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d13c      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xf6>
 8005cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd4:	fab3 f383 	clz	r3, r3
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_RCC_ClockConfig+0xa6>
 8005ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	e00f      	b.n	8005d0e <HAL_RCC_ClockConfig+0xc6>
 8005cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d04:	fa93 f3a3 	rbit	r3, r3
 8005d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d16:	fa92 f2a2 	rbit	r2, r2
 8005d1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005d1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d1e:	fab2 f282 	clz	r2, r2
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	f042 0220 	orr.w	r2, r2, #32
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	f002 021f 	and.w	r2, r2, #31
 8005d2e:	2101      	movs	r1, #1
 8005d30:	fa01 f202 	lsl.w	r2, r1, r2
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d17b      	bne.n	8005e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0f3      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d13c      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x178>
 8005d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d4e:	fa93 f3a3 	rbit	r3, r3
 8005d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d56:	fab3 f383 	clz	r3, r3
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d102      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x128>
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	e00f      	b.n	8005d90 <HAL_RCC_ClockConfig+0x148>
 8005d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d82:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d8c:	4b46      	ldr	r3, [pc, #280]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d98:	fa92 f2a2 	rbit	r2, r2
 8005d9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005da0:	fab2 f282 	clz	r2, r2
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	f042 0220 	orr.w	r2, r2, #32
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	f002 021f 	and.w	r2, r2, #31
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 f202 	lsl.w	r2, r1, r2
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13a      	bne.n	8005e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0b2      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	fa93 f3a3 	rbit	r3, r3
 8005dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f043 0301 	orr.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x1a0>
 8005de2:	4b31      	ldr	r3, [pc, #196]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	e00d      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1bc>
 8005de8:	2302      	movs	r3, #2
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	2302      	movs	r3, #2
 8005df6:	623b      	str	r3, [r7, #32]
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	fa93 f3a3 	rbit	r3, r3
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	4b29      	ldr	r3, [pc, #164]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	2202      	movs	r2, #2
 8005e06:	61ba      	str	r2, [r7, #24]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	fa92 f2a2 	rbit	r2, r2
 8005e0e:	617a      	str	r2, [r7, #20]
  return result;
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	fab2 f282 	clz	r2, r2
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	f002 021f 	and.w	r2, r2, #31
 8005e22:	2101      	movs	r1, #1
 8005e24:	fa01 f202 	lsl.w	r2, r1, r2
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e079      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f023 0203 	bic.w	r2, r3, #3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	491a      	ldr	r1, [pc, #104]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e44:	f7fb ffec 	bl	8001e20 <HAL_GetTick>
 8005e48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	e00a      	b.n	8005e62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e4c:	f7fb ffe8 	bl	8001e20 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e061      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e62:	4b11      	ldr	r3, [pc, #68]	@ (8005ea8 <HAL_RCC_ClockConfig+0x260>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 020c 	and.w	r2, r3, #12
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d1eb      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d214      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e82:	4b08      	ldr	r3, [pc, #32]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 0207 	bic.w	r2, r3, #7
 8005e8a:	4906      	ldr	r1, [pc, #24]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <HAL_RCC_ClockConfig+0x25c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e040      	b.n	8005f26 <HAL_RCC_ClockConfig+0x2de>
 8005ea4:	40022000 	.word	0x40022000
 8005ea8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f30 <HAL_RCC_ClockConfig+0x2e8>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	491a      	ldr	r1, [pc, #104]	@ (8005f30 <HAL_RCC_ClockConfig+0x2e8>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed6:	4b16      	ldr	r3, [pc, #88]	@ (8005f30 <HAL_RCC_ClockConfig+0x2e8>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4912      	ldr	r1, [pc, #72]	@ (8005f30 <HAL_RCC_ClockConfig+0x2e8>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005eea:	f000 f829 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8005eee:	4601      	mov	r1, r0
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f30 <HAL_RCC_ClockConfig+0x2e8>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ef8:	22f0      	movs	r2, #240	@ 0xf0
 8005efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	fa92 f2a2 	rbit	r2, r2
 8005f02:	60fa      	str	r2, [r7, #12]
  return result;
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	fab2 f282 	clz	r2, r2
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	40d3      	lsrs	r3, r2
 8005f0e:	4a09      	ldr	r2, [pc, #36]	@ (8005f34 <HAL_RCC_ClockConfig+0x2ec>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	fa21 f303 	lsr.w	r3, r1, r3
 8005f16:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <HAL_RCC_ClockConfig+0x2f0>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f1a:	4b08      	ldr	r3, [pc, #32]	@ (8005f3c <HAL_RCC_ClockConfig+0x2f4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fb ff3a 	bl	8001d98 <HAL_InitTick>
  
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3778      	adds	r7, #120	@ 0x78
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	08007240 	.word	0x08007240
 8005f38:	20000030 	.word	0x20000030
 8005f3c:	20000034 	.word	0x20000034

08005f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d002      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x30>
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCC_GetSysClockFreq+0x36>
 8005f6e:	e026      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f70:	4b19      	ldr	r3, [pc, #100]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f72:	613b      	str	r3, [r7, #16]
      break;
 8005f74:	e026      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	0c9b      	lsrs	r3, r3, #18
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	4a17      	ldr	r2, [pc, #92]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f80:	5cd3      	ldrb	r3, [r2, r3]
 8005f82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	4a14      	ldr	r2, [pc, #80]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f8e:	5cd3      	ldrb	r3, [r2, r3]
 8005f90:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e004      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	613b      	str	r3, [r7, #16]
      break;
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fbe:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fc0:	613b      	str	r3, [r7, #16]
      break;
 8005fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fc4:	693b      	ldr	r3, [r7, #16]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	007a1200 	.word	0x007a1200
 8005fdc:	08007250 	.word	0x08007250
 8005fe0:	08007260 	.word	0x08007260
 8005fe4:	003d0900 	.word	0x003d0900

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b092      	sub	sp, #72	@ 0x48
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80d4 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600c:	4b4e      	ldr	r3, [pc, #312]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10e      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006018:	4b4b      	ldr	r3, [pc, #300]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	4a4a      	ldr	r2, [pc, #296]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006022:	61d3      	str	r3, [r2, #28]
 8006024:	4b48      	ldr	r3, [pc, #288]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006036:	4b45      	ldr	r3, [pc, #276]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d118      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006042:	4b42      	ldr	r3, [pc, #264]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a41      	ldr	r2, [pc, #260]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800604e:	f7fb fee7 	bl	8001e20 <HAL_GetTick>
 8006052:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006056:	f7fb fee3 	bl	8001e20 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b64      	cmp	r3, #100	@ 0x64
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e13c      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006068:	4b38      	ldr	r3, [pc, #224]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006074:	4b34      	ldr	r3, [pc, #208]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800607e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8084 	beq.w	800618e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006090:	429a      	cmp	r2, r3
 8006092:	d07c      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006094:	4b2c      	ldr	r3, [pc, #176]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800609e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80060a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80060ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ae:	fab3 f383 	clz	r3, r3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b26      	ldr	r3, [pc, #152]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	2301      	movs	r3, #1
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80060c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	fa93 f3a3 	rbit	r3, r3
 80060ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060d2:	fab3 f383 	clz	r3, r3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04b      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f6:	f7fb fe93 	bl	8001e20 <HAL_GetTick>
 80060fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fc:	e00a      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fb fe8f 	bl	8001e20 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e0e6      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8006114:	2302      	movs	r3, #2
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006120:	2302      	movs	r3, #2
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	fa93 f3a3 	rbit	r3, r3
 800612a:	61fb      	str	r3, [r7, #28]
  return result;
 800612c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612e:	fab3 f383 	clz	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d108      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006142:	4b01      	ldr	r3, [pc, #4]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	e00d      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006148:	40021000 	.word	0x40021000
 800614c:	40007000 	.word	0x40007000
 8006150:	10908100 	.word	0x10908100
 8006154:	2302      	movs	r3, #2
 8006156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	fa93 f3a3 	rbit	r3, r3
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	4b62      	ldr	r3, [pc, #392]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	2202      	movs	r2, #2
 8006166:	613a      	str	r2, [r7, #16]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	fa92 f2a2 	rbit	r2, r2
 800616e:	60fa      	str	r2, [r7, #12]
  return result;
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	fab2 f282 	clz	r2, r2
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	f002 021f 	and.w	r2, r2, #31
 8006182:	2101      	movs	r1, #1
 8006184:	fa01 f202 	lsl.w	r2, r1, r2
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0b7      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800618e:	4b57      	ldr	r3, [pc, #348]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4954      	ldr	r1, [pc, #336]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800619c:	4313      	orrs	r3, r2
 800619e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d105      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a8:	4b50      	ldr	r3, [pc, #320]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4a4f      	ldr	r2, [pc, #316]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061c0:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	f023 0203 	bic.w	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4947      	ldr	r1, [pc, #284]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061de:	4b43      	ldr	r3, [pc, #268]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	f023 0210 	bic.w	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4940      	ldr	r1, [pc, #256]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061fc:	4b3b      	ldr	r3, [pc, #236]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006200:	f023 0220 	bic.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4938      	ldr	r1, [pc, #224]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800620a:	4313      	orrs	r3, r2
 800620c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800621a:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4931      	ldr	r1, [pc, #196]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006228:	4313      	orrs	r3, r2
 800622a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006238:	4b2c      	ldr	r3, [pc, #176]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4929      	ldr	r1, [pc, #164]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006246:	4313      	orrs	r3, r2
 8006248:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006256:	4b25      	ldr	r3, [pc, #148]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	4922      	ldr	r1, [pc, #136]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006264:	4313      	orrs	r3, r2
 8006266:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006274:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	491a      	ldr	r1, [pc, #104]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006282:	4313      	orrs	r3, r2
 8006284:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d008      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006292:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	4913      	ldr	r1, [pc, #76]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80062b0:	4b0e      	ldr	r3, [pc, #56]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	490b      	ldr	r1, [pc, #44]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80062ce:	4b07      	ldr	r3, [pc, #28]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	4904      	ldr	r1, [pc, #16]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3748      	adds	r7, #72	@ 0x48
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000

080062f0 <memset>:
 80062f0:	4402      	add	r2, r0
 80062f2:	4603      	mov	r3, r0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d100      	bne.n	80062fa <memset+0xa>
 80062f8:	4770      	bx	lr
 80062fa:	f803 1b01 	strb.w	r1, [r3], #1
 80062fe:	e7f9      	b.n	80062f4 <memset+0x4>

08006300 <__errno>:
 8006300:	4b01      	ldr	r3, [pc, #4]	@ (8006308 <__errno+0x8>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000003c 	.word	0x2000003c

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4d0d      	ldr	r5, [pc, #52]	@ (8006344 <__libc_init_array+0x38>)
 8006310:	4c0d      	ldr	r4, [pc, #52]	@ (8006348 <__libc_init_array+0x3c>)
 8006312:	1b64      	subs	r4, r4, r5
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	2600      	movs	r6, #0
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4d0b      	ldr	r5, [pc, #44]	@ (800634c <__libc_init_array+0x40>)
 800631e:	4c0c      	ldr	r4, [pc, #48]	@ (8006350 <__libc_init_array+0x44>)
 8006320:	f000 ff78 	bl	8007214 <_init>
 8006324:	1b64      	subs	r4, r4, r5
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	2600      	movs	r6, #0
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f855 3b04 	ldr.w	r3, [r5], #4
 8006334:	4798      	blx	r3
 8006336:	3601      	adds	r6, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f855 3b04 	ldr.w	r3, [r5], #4
 800633e:	4798      	blx	r3
 8006340:	3601      	adds	r6, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	080072a0 	.word	0x080072a0
 8006348:	080072a0 	.word	0x080072a0
 800634c:	080072a0 	.word	0x080072a0
 8006350:	080072a4 	.word	0x080072a4

08006354 <pow>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	ed2d 8b02 	vpush	{d8}
 800635a:	eeb0 8a40 	vmov.f32	s16, s0
 800635e:	eef0 8a60 	vmov.f32	s17, s1
 8006362:	ec55 4b11 	vmov	r4, r5, d1
 8006366:	f000 f873 	bl	8006450 <__ieee754_pow>
 800636a:	4622      	mov	r2, r4
 800636c:	462b      	mov	r3, r5
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	ec57 6b10 	vmov	r6, r7, d0
 8006376:	f7fa fb7d 	bl	8000a74 <__aeabi_dcmpun>
 800637a:	2800      	cmp	r0, #0
 800637c:	d13b      	bne.n	80063f6 <pow+0xa2>
 800637e:	ec51 0b18 	vmov	r0, r1, d8
 8006382:	2200      	movs	r2, #0
 8006384:	2300      	movs	r3, #0
 8006386:	f7fa fb43 	bl	8000a10 <__aeabi_dcmpeq>
 800638a:	b1b8      	cbz	r0, 80063bc <pow+0x68>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7fa fb3c 	bl	8000a10 <__aeabi_dcmpeq>
 8006398:	2800      	cmp	r0, #0
 800639a:	d146      	bne.n	800642a <pow+0xd6>
 800639c:	ec45 4b10 	vmov	d0, r4, r5
 80063a0:	f000 f848 	bl	8006434 <finite>
 80063a4:	b338      	cbz	r0, 80063f6 <pow+0xa2>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa fb39 	bl	8000a24 <__aeabi_dcmplt>
 80063b2:	b300      	cbz	r0, 80063f6 <pow+0xa2>
 80063b4:	f7ff ffa4 	bl	8006300 <__errno>
 80063b8:	2322      	movs	r3, #34	@ 0x22
 80063ba:	e01b      	b.n	80063f4 <pow+0xa0>
 80063bc:	ec47 6b10 	vmov	d0, r6, r7
 80063c0:	f000 f838 	bl	8006434 <finite>
 80063c4:	b9e0      	cbnz	r0, 8006400 <pow+0xac>
 80063c6:	eeb0 0a48 	vmov.f32	s0, s16
 80063ca:	eef0 0a68 	vmov.f32	s1, s17
 80063ce:	f000 f831 	bl	8006434 <finite>
 80063d2:	b1a8      	cbz	r0, 8006400 <pow+0xac>
 80063d4:	ec45 4b10 	vmov	d0, r4, r5
 80063d8:	f000 f82c 	bl	8006434 <finite>
 80063dc:	b180      	cbz	r0, 8006400 <pow+0xac>
 80063de:	4632      	mov	r2, r6
 80063e0:	463b      	mov	r3, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7fa fb45 	bl	8000a74 <__aeabi_dcmpun>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d0e2      	beq.n	80063b4 <pow+0x60>
 80063ee:	f7ff ff87 	bl	8006300 <__errno>
 80063f2:	2321      	movs	r3, #33	@ 0x21
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	ecbd 8b02 	vpop	{d8}
 80063fa:	ec47 6b10 	vmov	d0, r6, r7
 80063fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006400:	2200      	movs	r2, #0
 8006402:	2300      	movs	r3, #0
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f7fa fb02 	bl	8000a10 <__aeabi_dcmpeq>
 800640c:	2800      	cmp	r0, #0
 800640e:	d0f2      	beq.n	80063f6 <pow+0xa2>
 8006410:	eeb0 0a48 	vmov.f32	s0, s16
 8006414:	eef0 0a68 	vmov.f32	s1, s17
 8006418:	f000 f80c 	bl	8006434 <finite>
 800641c:	2800      	cmp	r0, #0
 800641e:	d0ea      	beq.n	80063f6 <pow+0xa2>
 8006420:	ec45 4b10 	vmov	d0, r4, r5
 8006424:	f000 f806 	bl	8006434 <finite>
 8006428:	e7c3      	b.n	80063b2 <pow+0x5e>
 800642a:	4f01      	ldr	r7, [pc, #4]	@ (8006430 <pow+0xdc>)
 800642c:	2600      	movs	r6, #0
 800642e:	e7e2      	b.n	80063f6 <pow+0xa2>
 8006430:	3ff00000 	.word	0x3ff00000

08006434 <finite>:
 8006434:	b082      	sub	sp, #8
 8006436:	ed8d 0b00 	vstr	d0, [sp]
 800643a:	9801      	ldr	r0, [sp, #4]
 800643c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006440:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006444:	0fc0      	lsrs	r0, r0, #31
 8006446:	b002      	add	sp, #8
 8006448:	4770      	bx	lr
 800644a:	0000      	movs	r0, r0
 800644c:	0000      	movs	r0, r0
	...

08006450 <__ieee754_pow>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	b091      	sub	sp, #68	@ 0x44
 8006456:	ed8d 1b00 	vstr	d1, [sp]
 800645a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800645e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006462:	ea5a 0001 	orrs.w	r0, sl, r1
 8006466:	ec57 6b10 	vmov	r6, r7, d0
 800646a:	d113      	bne.n	8006494 <__ieee754_pow+0x44>
 800646c:	19b3      	adds	r3, r6, r6
 800646e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006472:	4152      	adcs	r2, r2
 8006474:	4298      	cmp	r0, r3
 8006476:	4b98      	ldr	r3, [pc, #608]	@ (80066d8 <__ieee754_pow+0x288>)
 8006478:	4193      	sbcs	r3, r2
 800647a:	f080 84ea 	bcs.w	8006e52 <__ieee754_pow+0xa02>
 800647e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006482:	4630      	mov	r0, r6
 8006484:	4639      	mov	r1, r7
 8006486:	f7f9 fea5 	bl	80001d4 <__adddf3>
 800648a:	ec41 0b10 	vmov	d0, r0, r1
 800648e:	b011      	add	sp, #68	@ 0x44
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	4a91      	ldr	r2, [pc, #580]	@ (80066dc <__ieee754_pow+0x28c>)
 8006496:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800649a:	4590      	cmp	r8, r2
 800649c:	463d      	mov	r5, r7
 800649e:	4633      	mov	r3, r6
 80064a0:	d806      	bhi.n	80064b0 <__ieee754_pow+0x60>
 80064a2:	d101      	bne.n	80064a8 <__ieee754_pow+0x58>
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	d1ea      	bne.n	800647e <__ieee754_pow+0x2e>
 80064a8:	4592      	cmp	sl, r2
 80064aa:	d801      	bhi.n	80064b0 <__ieee754_pow+0x60>
 80064ac:	d10e      	bne.n	80064cc <__ieee754_pow+0x7c>
 80064ae:	b169      	cbz	r1, 80064cc <__ieee754_pow+0x7c>
 80064b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80064b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80064b8:	431d      	orrs	r5, r3
 80064ba:	d1e0      	bne.n	800647e <__ieee754_pow+0x2e>
 80064bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064c0:	18db      	adds	r3, r3, r3
 80064c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80064c6:	4152      	adcs	r2, r2
 80064c8:	429d      	cmp	r5, r3
 80064ca:	e7d4      	b.n	8006476 <__ieee754_pow+0x26>
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	46c3      	mov	fp, r8
 80064d0:	da3a      	bge.n	8006548 <__ieee754_pow+0xf8>
 80064d2:	4a83      	ldr	r2, [pc, #524]	@ (80066e0 <__ieee754_pow+0x290>)
 80064d4:	4592      	cmp	sl, r2
 80064d6:	d84d      	bhi.n	8006574 <__ieee754_pow+0x124>
 80064d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80064dc:	4592      	cmp	sl, r2
 80064de:	f240 84c7 	bls.w	8006e70 <__ieee754_pow+0xa20>
 80064e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80064e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80064ea:	2a14      	cmp	r2, #20
 80064ec:	dd0f      	ble.n	800650e <__ieee754_pow+0xbe>
 80064ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80064f2:	fa21 f402 	lsr.w	r4, r1, r2
 80064f6:	fa04 f202 	lsl.w	r2, r4, r2
 80064fa:	428a      	cmp	r2, r1
 80064fc:	f040 84b8 	bne.w	8006e70 <__ieee754_pow+0xa20>
 8006500:	f004 0401 	and.w	r4, r4, #1
 8006504:	f1c4 0402 	rsb	r4, r4, #2
 8006508:	2900      	cmp	r1, #0
 800650a:	d158      	bne.n	80065be <__ieee754_pow+0x16e>
 800650c:	e00e      	b.n	800652c <__ieee754_pow+0xdc>
 800650e:	2900      	cmp	r1, #0
 8006510:	d154      	bne.n	80065bc <__ieee754_pow+0x16c>
 8006512:	f1c2 0214 	rsb	r2, r2, #20
 8006516:	fa4a f402 	asr.w	r4, sl, r2
 800651a:	fa04 f202 	lsl.w	r2, r4, r2
 800651e:	4552      	cmp	r2, sl
 8006520:	f040 84a3 	bne.w	8006e6a <__ieee754_pow+0xa1a>
 8006524:	f004 0401 	and.w	r4, r4, #1
 8006528:	f1c4 0402 	rsb	r4, r4, #2
 800652c:	4a6d      	ldr	r2, [pc, #436]	@ (80066e4 <__ieee754_pow+0x294>)
 800652e:	4592      	cmp	sl, r2
 8006530:	d12e      	bne.n	8006590 <__ieee754_pow+0x140>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	f280 8494 	bge.w	8006e62 <__ieee754_pow+0xa12>
 800653a:	496a      	ldr	r1, [pc, #424]	@ (80066e4 <__ieee754_pow+0x294>)
 800653c:	4632      	mov	r2, r6
 800653e:	463b      	mov	r3, r7
 8006540:	2000      	movs	r0, #0
 8006542:	f7fa f927 	bl	8000794 <__aeabi_ddiv>
 8006546:	e7a0      	b.n	800648a <__ieee754_pow+0x3a>
 8006548:	2400      	movs	r4, #0
 800654a:	bbc1      	cbnz	r1, 80065be <__ieee754_pow+0x16e>
 800654c:	4a63      	ldr	r2, [pc, #396]	@ (80066dc <__ieee754_pow+0x28c>)
 800654e:	4592      	cmp	sl, r2
 8006550:	d1ec      	bne.n	800652c <__ieee754_pow+0xdc>
 8006552:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006556:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800655a:	431a      	orrs	r2, r3
 800655c:	f000 8479 	beq.w	8006e52 <__ieee754_pow+0xa02>
 8006560:	4b61      	ldr	r3, [pc, #388]	@ (80066e8 <__ieee754_pow+0x298>)
 8006562:	4598      	cmp	r8, r3
 8006564:	d908      	bls.n	8006578 <__ieee754_pow+0x128>
 8006566:	f1b9 0f00 	cmp.w	r9, #0
 800656a:	f2c0 8476 	blt.w	8006e5a <__ieee754_pow+0xa0a>
 800656e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006572:	e78a      	b.n	800648a <__ieee754_pow+0x3a>
 8006574:	2402      	movs	r4, #2
 8006576:	e7e8      	b.n	800654a <__ieee754_pow+0xfa>
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	f04f 0000 	mov.w	r0, #0
 8006580:	f04f 0100 	mov.w	r1, #0
 8006584:	da81      	bge.n	800648a <__ieee754_pow+0x3a>
 8006586:	e9dd 0300 	ldrd	r0, r3, [sp]
 800658a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800658e:	e77c      	b.n	800648a <__ieee754_pow+0x3a>
 8006590:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006594:	d106      	bne.n	80065a4 <__ieee754_pow+0x154>
 8006596:	4632      	mov	r2, r6
 8006598:	463b      	mov	r3, r7
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7f9 ffcf 	bl	8000540 <__aeabi_dmul>
 80065a2:	e772      	b.n	800648a <__ieee754_pow+0x3a>
 80065a4:	4a51      	ldr	r2, [pc, #324]	@ (80066ec <__ieee754_pow+0x29c>)
 80065a6:	4591      	cmp	r9, r2
 80065a8:	d109      	bne.n	80065be <__ieee754_pow+0x16e>
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	db07      	blt.n	80065be <__ieee754_pow+0x16e>
 80065ae:	ec47 6b10 	vmov	d0, r6, r7
 80065b2:	b011      	add	sp, #68	@ 0x44
 80065b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	f000 bd52 	b.w	8007060 <__ieee754_sqrt>
 80065bc:	2400      	movs	r4, #0
 80065be:	ec47 6b10 	vmov	d0, r6, r7
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	f000 fc88 	bl	8006ed8 <fabs>
 80065c8:	9b02      	ldr	r3, [sp, #8]
 80065ca:	ec51 0b10 	vmov	r0, r1, d0
 80065ce:	bb53      	cbnz	r3, 8006626 <__ieee754_pow+0x1d6>
 80065d0:	4b44      	ldr	r3, [pc, #272]	@ (80066e4 <__ieee754_pow+0x294>)
 80065d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d002      	beq.n	80065e0 <__ieee754_pow+0x190>
 80065da:	f1b8 0f00 	cmp.w	r8, #0
 80065de:	d122      	bne.n	8006626 <__ieee754_pow+0x1d6>
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	da05      	bge.n	80065f2 <__ieee754_pow+0x1a2>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	2000      	movs	r0, #0
 80065ec:	493d      	ldr	r1, [pc, #244]	@ (80066e4 <__ieee754_pow+0x294>)
 80065ee:	f7fa f8d1 	bl	8000794 <__aeabi_ddiv>
 80065f2:	2d00      	cmp	r5, #0
 80065f4:	f6bf af49 	bge.w	800648a <__ieee754_pow+0x3a>
 80065f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80065fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006600:	ea58 0804 	orrs.w	r8, r8, r4
 8006604:	d108      	bne.n	8006618 <__ieee754_pow+0x1c8>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	f7f9 fddf 	bl	80001d0 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	e794      	b.n	8006542 <__ieee754_pow+0xf2>
 8006618:	2c01      	cmp	r4, #1
 800661a:	f47f af36 	bne.w	800648a <__ieee754_pow+0x3a>
 800661e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006622:	4619      	mov	r1, r3
 8006624:	e731      	b.n	800648a <__ieee754_pow+0x3a>
 8006626:	0feb      	lsrs	r3, r5, #31
 8006628:	3b01      	subs	r3, #1
 800662a:	ea53 0204 	orrs.w	r2, r3, r4
 800662e:	d102      	bne.n	8006636 <__ieee754_pow+0x1e6>
 8006630:	4632      	mov	r2, r6
 8006632:	463b      	mov	r3, r7
 8006634:	e7e9      	b.n	800660a <__ieee754_pow+0x1ba>
 8006636:	3c01      	subs	r4, #1
 8006638:	431c      	orrs	r4, r3
 800663a:	d016      	beq.n	800666a <__ieee754_pow+0x21a>
 800663c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80066c8 <__ieee754_pow+0x278>
 8006640:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006644:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006648:	f240 8112 	bls.w	8006870 <__ieee754_pow+0x420>
 800664c:	4b28      	ldr	r3, [pc, #160]	@ (80066f0 <__ieee754_pow+0x2a0>)
 800664e:	459a      	cmp	sl, r3
 8006650:	4b25      	ldr	r3, [pc, #148]	@ (80066e8 <__ieee754_pow+0x298>)
 8006652:	d916      	bls.n	8006682 <__ieee754_pow+0x232>
 8006654:	4598      	cmp	r8, r3
 8006656:	d80b      	bhi.n	8006670 <__ieee754_pow+0x220>
 8006658:	f1b9 0f00 	cmp.w	r9, #0
 800665c:	da0b      	bge.n	8006676 <__ieee754_pow+0x226>
 800665e:	2000      	movs	r0, #0
 8006660:	b011      	add	sp, #68	@ 0x44
 8006662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006666:	f000 bcf3 	b.w	8007050 <__math_oflow>
 800666a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80066d0 <__ieee754_pow+0x280>
 800666e:	e7e7      	b.n	8006640 <__ieee754_pow+0x1f0>
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	dcf3      	bgt.n	800665e <__ieee754_pow+0x20e>
 8006676:	2000      	movs	r0, #0
 8006678:	b011      	add	sp, #68	@ 0x44
 800667a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667e:	f000 bcdf 	b.w	8007040 <__math_uflow>
 8006682:	4598      	cmp	r8, r3
 8006684:	d20c      	bcs.n	80066a0 <__ieee754_pow+0x250>
 8006686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	f7fa f9c9 	bl	8000a24 <__aeabi_dcmplt>
 8006692:	3800      	subs	r0, #0
 8006694:	bf18      	it	ne
 8006696:	2001      	movne	r0, #1
 8006698:	f1b9 0f00 	cmp.w	r9, #0
 800669c:	daec      	bge.n	8006678 <__ieee754_pow+0x228>
 800669e:	e7df      	b.n	8006660 <__ieee754_pow+0x210>
 80066a0:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <__ieee754_pow+0x294>)
 80066a2:	4598      	cmp	r8, r3
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	d924      	bls.n	80066f4 <__ieee754_pow+0x2a4>
 80066aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ae:	2300      	movs	r3, #0
 80066b0:	f7fa f9b8 	bl	8000a24 <__aeabi_dcmplt>
 80066b4:	3800      	subs	r0, #0
 80066b6:	bf18      	it	ne
 80066b8:	2001      	movne	r0, #1
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	dccf      	bgt.n	8006660 <__ieee754_pow+0x210>
 80066c0:	e7da      	b.n	8006678 <__ieee754_pow+0x228>
 80066c2:	bf00      	nop
 80066c4:	f3af 8000 	nop.w
 80066c8:	00000000 	.word	0x00000000
 80066cc:	3ff00000 	.word	0x3ff00000
 80066d0:	00000000 	.word	0x00000000
 80066d4:	bff00000 	.word	0xbff00000
 80066d8:	fff00000 	.word	0xfff00000
 80066dc:	7ff00000 	.word	0x7ff00000
 80066e0:	433fffff 	.word	0x433fffff
 80066e4:	3ff00000 	.word	0x3ff00000
 80066e8:	3fefffff 	.word	0x3fefffff
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	43f00000 	.word	0x43f00000
 80066f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006860 <__ieee754_pow+0x410>)
 80066f6:	f7f9 fd6b 	bl	80001d0 <__aeabi_dsub>
 80066fa:	a351      	add	r3, pc, #324	@ (adr r3, 8006840 <__ieee754_pow+0x3f0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	4604      	mov	r4, r0
 8006702:	460d      	mov	r5, r1
 8006704:	f7f9 ff1c 	bl	8000540 <__aeabi_dmul>
 8006708:	a34f      	add	r3, pc, #316	@ (adr r3, 8006848 <__ieee754_pow+0x3f8>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	4606      	mov	r6, r0
 8006710:	460f      	mov	r7, r1
 8006712:	4620      	mov	r0, r4
 8006714:	4629      	mov	r1, r5
 8006716:	f7f9 ff13 	bl	8000540 <__aeabi_dmul>
 800671a:	4b52      	ldr	r3, [pc, #328]	@ (8006864 <__ieee754_pow+0x414>)
 800671c:	4682      	mov	sl, r0
 800671e:	468b      	mov	fp, r1
 8006720:	2200      	movs	r2, #0
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7f9 ff0b 	bl	8000540 <__aeabi_dmul>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	a148      	add	r1, pc, #288	@ (adr r1, 8006850 <__ieee754_pow+0x400>)
 8006730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006734:	f7f9 fd4c 	bl	80001d0 <__aeabi_dsub>
 8006738:	4622      	mov	r2, r4
 800673a:	462b      	mov	r3, r5
 800673c:	f7f9 ff00 	bl	8000540 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	2000      	movs	r0, #0
 8006746:	4948      	ldr	r1, [pc, #288]	@ (8006868 <__ieee754_pow+0x418>)
 8006748:	f7f9 fd42 	bl	80001d0 <__aeabi_dsub>
 800674c:	4622      	mov	r2, r4
 800674e:	4680      	mov	r8, r0
 8006750:	4689      	mov	r9, r1
 8006752:	462b      	mov	r3, r5
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	f7f9 fef2 	bl	8000540 <__aeabi_dmul>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7f9 feec 	bl	8000540 <__aeabi_dmul>
 8006768:	a33b      	add	r3, pc, #236	@ (adr r3, 8006858 <__ieee754_pow+0x408>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 fee7 	bl	8000540 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4650      	mov	r0, sl
 8006778:	4659      	mov	r1, fp
 800677a:	f7f9 fd29 	bl	80001d0 <__aeabi_dsub>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4680      	mov	r8, r0
 8006784:	4689      	mov	r9, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fd23 	bl	80001d4 <__adddf3>
 800678e:	2400      	movs	r4, #0
 8006790:	4632      	mov	r2, r6
 8006792:	463b      	mov	r3, r7
 8006794:	4620      	mov	r0, r4
 8006796:	460d      	mov	r5, r1
 8006798:	f7f9 fd1a 	bl	80001d0 <__aeabi_dsub>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7f9 fd14 	bl	80001d0 <__aeabi_dsub>
 80067a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067b0:	2300      	movs	r3, #0
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	4652      	mov	r2, sl
 80067be:	465b      	mov	r3, fp
 80067c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067c4:	f7f9 fd04 	bl	80001d0 <__aeabi_dsub>
 80067c8:	4622      	mov	r2, r4
 80067ca:	462b      	mov	r3, r5
 80067cc:	f7f9 feb8 	bl	8000540 <__aeabi_dmul>
 80067d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d4:	4680      	mov	r8, r0
 80067d6:	4689      	mov	r9, r1
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7f9 feb0 	bl	8000540 <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4640      	mov	r0, r8
 80067e6:	4649      	mov	r1, r9
 80067e8:	f7f9 fcf4 	bl	80001d4 <__adddf3>
 80067ec:	4652      	mov	r2, sl
 80067ee:	465b      	mov	r3, fp
 80067f0:	4606      	mov	r6, r0
 80067f2:	460f      	mov	r7, r1
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 fea2 	bl	8000540 <__aeabi_dmul>
 80067fc:	460b      	mov	r3, r1
 80067fe:	4602      	mov	r2, r0
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fce4 	bl	80001d4 <__adddf3>
 800680c:	4b17      	ldr	r3, [pc, #92]	@ (800686c <__ieee754_pow+0x41c>)
 800680e:	4299      	cmp	r1, r3
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	468a      	mov	sl, r1
 8006816:	468b      	mov	fp, r1
 8006818:	f340 82ef 	ble.w	8006dfa <__ieee754_pow+0x9aa>
 800681c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006820:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006824:	4303      	orrs	r3, r0
 8006826:	f000 81e8 	beq.w	8006bfa <__ieee754_pow+0x7aa>
 800682a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682e:	2200      	movs	r2, #0
 8006830:	2300      	movs	r3, #0
 8006832:	f7fa f8f7 	bl	8000a24 <__aeabi_dcmplt>
 8006836:	3800      	subs	r0, #0
 8006838:	bf18      	it	ne
 800683a:	2001      	movne	r0, #1
 800683c:	e710      	b.n	8006660 <__ieee754_pow+0x210>
 800683e:	bf00      	nop
 8006840:	60000000 	.word	0x60000000
 8006844:	3ff71547 	.word	0x3ff71547
 8006848:	f85ddf44 	.word	0xf85ddf44
 800684c:	3e54ae0b 	.word	0x3e54ae0b
 8006850:	55555555 	.word	0x55555555
 8006854:	3fd55555 	.word	0x3fd55555
 8006858:	652b82fe 	.word	0x652b82fe
 800685c:	3ff71547 	.word	0x3ff71547
 8006860:	3ff00000 	.word	0x3ff00000
 8006864:	3fd00000 	.word	0x3fd00000
 8006868:	3fe00000 	.word	0x3fe00000
 800686c:	408fffff 	.word	0x408fffff
 8006870:	4bd5      	ldr	r3, [pc, #852]	@ (8006bc8 <__ieee754_pow+0x778>)
 8006872:	402b      	ands	r3, r5
 8006874:	2200      	movs	r2, #0
 8006876:	b92b      	cbnz	r3, 8006884 <__ieee754_pow+0x434>
 8006878:	4bd4      	ldr	r3, [pc, #848]	@ (8006bcc <__ieee754_pow+0x77c>)
 800687a:	f7f9 fe61 	bl	8000540 <__aeabi_dmul>
 800687e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006882:	468b      	mov	fp, r1
 8006884:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006888:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800688c:	4413      	add	r3, r2
 800688e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006890:	4bcf      	ldr	r3, [pc, #828]	@ (8006bd0 <__ieee754_pow+0x780>)
 8006892:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006896:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800689a:	459b      	cmp	fp, r3
 800689c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80068a0:	dd08      	ble.n	80068b4 <__ieee754_pow+0x464>
 80068a2:	4bcc      	ldr	r3, [pc, #816]	@ (8006bd4 <__ieee754_pow+0x784>)
 80068a4:	459b      	cmp	fp, r3
 80068a6:	f340 81a5 	ble.w	8006bf4 <__ieee754_pow+0x7a4>
 80068aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ac:	3301      	adds	r3, #1
 80068ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80068b4:	f04f 0a00 	mov.w	sl, #0
 80068b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80068bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068be:	4bc6      	ldr	r3, [pc, #792]	@ (8006bd8 <__ieee754_pow+0x788>)
 80068c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068c4:	ed93 7b00 	vldr	d7, [r3]
 80068c8:	4629      	mov	r1, r5
 80068ca:	ec53 2b17 	vmov	r2, r3, d7
 80068ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068d6:	f7f9 fc7b 	bl	80001d0 <__aeabi_dsub>
 80068da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068de:	4606      	mov	r6, r0
 80068e0:	460f      	mov	r7, r1
 80068e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e6:	f7f9 fc75 	bl	80001d4 <__adddf3>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	2000      	movs	r0, #0
 80068f0:	49ba      	ldr	r1, [pc, #744]	@ (8006bdc <__ieee754_pow+0x78c>)
 80068f2:	f7f9 ff4f 	bl	8000794 <__aeabi_ddiv>
 80068f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	f7f9 fe1d 	bl	8000540 <__aeabi_dmul>
 8006906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800690e:	106d      	asrs	r5, r5, #1
 8006910:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006914:	f04f 0b00 	mov.w	fp, #0
 8006918:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800691c:	4661      	mov	r1, ip
 800691e:	2200      	movs	r2, #0
 8006920:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006924:	4658      	mov	r0, fp
 8006926:	46e1      	mov	r9, ip
 8006928:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	f7f9 fe06 	bl	8000540 <__aeabi_dmul>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7f9 fc48 	bl	80001d0 <__aeabi_dsub>
 8006940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006944:	4606      	mov	r6, r0
 8006946:	460f      	mov	r7, r1
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	f7f9 fc40 	bl	80001d0 <__aeabi_dsub>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006958:	f7f9 fc3a 	bl	80001d0 <__aeabi_dsub>
 800695c:	465a      	mov	r2, fp
 800695e:	464b      	mov	r3, r9
 8006960:	f7f9 fdee 	bl	8000540 <__aeabi_dmul>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4630      	mov	r0, r6
 800696a:	4639      	mov	r1, r7
 800696c:	f7f9 fc30 	bl	80001d0 <__aeabi_dsub>
 8006970:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006974:	f7f9 fde4 	bl	8000540 <__aeabi_dmul>
 8006978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	f7f9 fddc 	bl	8000540 <__aeabi_dmul>
 8006988:	a37d      	add	r3, pc, #500	@ (adr r3, 8006b80 <__ieee754_pow+0x730>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	4604      	mov	r4, r0
 8006990:	460d      	mov	r5, r1
 8006992:	f7f9 fdd5 	bl	8000540 <__aeabi_dmul>
 8006996:	a37c      	add	r3, pc, #496	@ (adr r3, 8006b88 <__ieee754_pow+0x738>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7f9 fc1a 	bl	80001d4 <__adddf3>
 80069a0:	4622      	mov	r2, r4
 80069a2:	462b      	mov	r3, r5
 80069a4:	f7f9 fdcc 	bl	8000540 <__aeabi_dmul>
 80069a8:	a379      	add	r3, pc, #484	@ (adr r3, 8006b90 <__ieee754_pow+0x740>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f7f9 fc11 	bl	80001d4 <__adddf3>
 80069b2:	4622      	mov	r2, r4
 80069b4:	462b      	mov	r3, r5
 80069b6:	f7f9 fdc3 	bl	8000540 <__aeabi_dmul>
 80069ba:	a377      	add	r3, pc, #476	@ (adr r3, 8006b98 <__ieee754_pow+0x748>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fc08 	bl	80001d4 <__adddf3>
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	f7f9 fdba 	bl	8000540 <__aeabi_dmul>
 80069cc:	a374      	add	r3, pc, #464	@ (adr r3, 8006ba0 <__ieee754_pow+0x750>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f7f9 fbff 	bl	80001d4 <__adddf3>
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	f7f9 fdb1 	bl	8000540 <__aeabi_dmul>
 80069de:	a372      	add	r3, pc, #456	@ (adr r3, 8006ba8 <__ieee754_pow+0x758>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7f9 fbf6 	bl	80001d4 <__adddf3>
 80069e8:	4622      	mov	r2, r4
 80069ea:	4606      	mov	r6, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	462b      	mov	r3, r5
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7f9 fda4 	bl	8000540 <__aeabi_dmul>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7f9 fd9e 	bl	8000540 <__aeabi_dmul>
 8006a04:	465a      	mov	r2, fp
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a10:	f7f9 fbe0 	bl	80001d4 <__adddf3>
 8006a14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a18:	f7f9 fd92 	bl	8000540 <__aeabi_dmul>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f7f9 fbd8 	bl	80001d4 <__adddf3>
 8006a24:	465a      	mov	r2, fp
 8006a26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	4658      	mov	r0, fp
 8006a2e:	4649      	mov	r1, r9
 8006a30:	f7f9 fd86 	bl	8000540 <__aeabi_dmul>
 8006a34:	4b6a      	ldr	r3, [pc, #424]	@ (8006be0 <__ieee754_pow+0x790>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	f7f9 fbca 	bl	80001d4 <__adddf3>
 8006a40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a44:	f7f9 fbc6 	bl	80001d4 <__adddf3>
 8006a48:	46d8      	mov	r8, fp
 8006a4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006a4e:	460d      	mov	r5, r1
 8006a50:	465a      	mov	r2, fp
 8006a52:	460b      	mov	r3, r1
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006a5c:	f7f9 fd70 	bl	8000540 <__aeabi_dmul>
 8006a60:	465c      	mov	r4, fp
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	4b5e      	ldr	r3, [pc, #376]	@ (8006be0 <__ieee754_pow+0x790>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f7f9 fbaf 	bl	80001d0 <__aeabi_dsub>
 8006a72:	4632      	mov	r2, r6
 8006a74:	463b      	mov	r3, r7
 8006a76:	f7f9 fbab 	bl	80001d0 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a82:	f7f9 fba5 	bl	80001d0 <__aeabi_dsub>
 8006a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8a:	f7f9 fd59 	bl	8000540 <__aeabi_dmul>
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4606      	mov	r6, r0
 8006a92:	460f      	mov	r7, r1
 8006a94:	462b      	mov	r3, r5
 8006a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a9a:	f7f9 fd51 	bl	8000540 <__aeabi_dmul>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fb95 	bl	80001d4 <__adddf3>
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 fb8d 	bl	80001d4 <__adddf3>
 8006aba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006abe:	a33c      	add	r3, pc, #240	@ (adr r3, 8006bb0 <__ieee754_pow+0x760>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4658      	mov	r0, fp
 8006ac6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006aca:	460d      	mov	r5, r1
 8006acc:	f7f9 fd38 	bl	8000540 <__aeabi_dmul>
 8006ad0:	465c      	mov	r4, fp
 8006ad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	464b      	mov	r3, r9
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7f9 fb77 	bl	80001d0 <__aeabi_dsub>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 fb71 	bl	80001d0 <__aeabi_dsub>
 8006aee:	a332      	add	r3, pc, #200	@ (adr r3, 8006bb8 <__ieee754_pow+0x768>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f7f9 fd24 	bl	8000540 <__aeabi_dmul>
 8006af8:	a331      	add	r3, pc, #196	@ (adr r3, 8006bc0 <__ieee754_pow+0x770>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	4606      	mov	r6, r0
 8006b00:	460f      	mov	r7, r1
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fd1b 	bl	8000540 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4630      	mov	r0, r6
 8006b10:	4639      	mov	r1, r7
 8006b12:	f7f9 fb5f 	bl	80001d4 <__adddf3>
 8006b16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b18:	4b32      	ldr	r3, [pc, #200]	@ (8006be4 <__ieee754_pow+0x794>)
 8006b1a:	4413      	add	r3, r2
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fb58 	bl	80001d4 <__adddf3>
 8006b24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b2a:	f7f9 fc9f 	bl	800046c <__aeabi_i2d>
 8006b2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b30:	4b2d      	ldr	r3, [pc, #180]	@ (8006be8 <__ieee754_pow+0x798>)
 8006b32:	4413      	add	r3, r2
 8006b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b38:	4606      	mov	r6, r0
 8006b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b3e:	460f      	mov	r7, r1
 8006b40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b44:	f7f9 fb46 	bl	80001d4 <__adddf3>
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f7f9 fb42 	bl	80001d4 <__adddf3>
 8006b50:	4632      	mov	r2, r6
 8006b52:	463b      	mov	r3, r7
 8006b54:	f7f9 fb3e 	bl	80001d4 <__adddf3>
 8006b58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4658      	mov	r0, fp
 8006b62:	460d      	mov	r5, r1
 8006b64:	f7f9 fb34 	bl	80001d0 <__aeabi_dsub>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f7f9 fb30 	bl	80001d0 <__aeabi_dsub>
 8006b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b74:	f7f9 fb2c 	bl	80001d0 <__aeabi_dsub>
 8006b78:	465c      	mov	r4, fp
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	e036      	b.n	8006bec <__ieee754_pow+0x79c>
 8006b7e:	bf00      	nop
 8006b80:	4a454eef 	.word	0x4a454eef
 8006b84:	3fca7e28 	.word	0x3fca7e28
 8006b88:	93c9db65 	.word	0x93c9db65
 8006b8c:	3fcd864a 	.word	0x3fcd864a
 8006b90:	a91d4101 	.word	0xa91d4101
 8006b94:	3fd17460 	.word	0x3fd17460
 8006b98:	518f264d 	.word	0x518f264d
 8006b9c:	3fd55555 	.word	0x3fd55555
 8006ba0:	db6fabff 	.word	0xdb6fabff
 8006ba4:	3fdb6db6 	.word	0x3fdb6db6
 8006ba8:	33333303 	.word	0x33333303
 8006bac:	3fe33333 	.word	0x3fe33333
 8006bb0:	e0000000 	.word	0xe0000000
 8006bb4:	3feec709 	.word	0x3feec709
 8006bb8:	dc3a03fd 	.word	0xdc3a03fd
 8006bbc:	3feec709 	.word	0x3feec709
 8006bc0:	145b01f5 	.word	0x145b01f5
 8006bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	43400000 	.word	0x43400000
 8006bd0:	0003988e 	.word	0x0003988e
 8006bd4:	000bb679 	.word	0x000bb679
 8006bd8:	08007290 	.word	0x08007290
 8006bdc:	3ff00000 	.word	0x3ff00000
 8006be0:	40080000 	.word	0x40080000
 8006be4:	08007270 	.word	0x08007270
 8006be8:	08007280 	.word	0x08007280
 8006bec:	460b      	mov	r3, r1
 8006bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf2:	e5d7      	b.n	80067a4 <__ieee754_pow+0x354>
 8006bf4:	f04f 0a01 	mov.w	sl, #1
 8006bf8:	e65e      	b.n	80068b8 <__ieee754_pow+0x468>
 8006bfa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006ecc <__ieee754_pow+0xa7c>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fae6 	bl	80001d4 <__adddf3>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c0e:	464b      	mov	r3, r9
 8006c10:	4620      	mov	r0, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	f7f9 fadc 	bl	80001d0 <__aeabi_dsub>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c20:	f7f9 ff1e 	bl	8000a60 <__aeabi_dcmpgt>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f47f ae00 	bne.w	800682a <__ieee754_pow+0x3da>
 8006c2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006c2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006c32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006c36:	fa43 fa0a 	asr.w	sl, r3, sl
 8006c3a:	44da      	add	sl, fp
 8006c3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006c40:	489d      	ldr	r0, [pc, #628]	@ (8006eb8 <__ieee754_pow+0xa68>)
 8006c42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006c46:	4108      	asrs	r0, r1
 8006c48:	ea00 030a 	and.w	r3, r0, sl
 8006c4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006c50:	f1c1 0114 	rsb	r1, r1, #20
 8006c54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006c58:	fa4a fa01 	asr.w	sl, sl, r1
 8006c5c:	f1bb 0f00 	cmp.w	fp, #0
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	bfb8      	it	lt
 8006c6a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c6e:	f7f9 faaf 	bl	80001d0 <__aeabi_dsub>
 8006c72:	4680      	mov	r8, r0
 8006c74:	4689      	mov	r9, r1
 8006c76:	4632      	mov	r2, r6
 8006c78:	463b      	mov	r3, r7
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 faa9 	bl	80001d4 <__adddf3>
 8006c82:	2400      	movs	r4, #0
 8006c84:	a37c      	add	r3, pc, #496	@ (adr r3, 8006e78 <__ieee754_pow+0xa28>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	f7f9 fc57 	bl	8000540 <__aeabi_dmul>
 8006c92:	4642      	mov	r2, r8
 8006c94:	e9cd 0100 	strd	r0, r1, [sp]
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 fa97 	bl	80001d0 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 fa91 	bl	80001d0 <__aeabi_dsub>
 8006cae:	a374      	add	r3, pc, #464	@ (adr r3, 8006e80 <__ieee754_pow+0xa30>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f7f9 fc44 	bl	8000540 <__aeabi_dmul>
 8006cb8:	a373      	add	r3, pc, #460	@ (adr r3, 8006e88 <__ieee754_pow+0xa38>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4689      	mov	r9, r1
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7f9 fc3b 	bl	8000540 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fa7f 	bl	80001d4 <__adddf3>
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ce2:	f7f9 fa77 	bl	80001d4 <__adddf3>
 8006ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cea:	4680      	mov	r8, r0
 8006cec:	4689      	mov	r9, r1
 8006cee:	f7f9 fa6f 	bl	80001d0 <__aeabi_dsub>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fa69 	bl	80001d0 <__aeabi_dsub>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	4606      	mov	r6, r0
 8006d02:	460f      	mov	r7, r1
 8006d04:	464b      	mov	r3, r9
 8006d06:	4640      	mov	r0, r8
 8006d08:	4649      	mov	r1, r9
 8006d0a:	f7f9 fc19 	bl	8000540 <__aeabi_dmul>
 8006d0e:	a360      	add	r3, pc, #384	@ (adr r3, 8006e90 <__ieee754_pow+0xa40>)
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	f7f9 fc12 	bl	8000540 <__aeabi_dmul>
 8006d1c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006e98 <__ieee754_pow+0xa48>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fa55 	bl	80001d0 <__aeabi_dsub>
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	f7f9 fc09 	bl	8000540 <__aeabi_dmul>
 8006d2e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006ea0 <__ieee754_pow+0xa50>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 fa4e 	bl	80001d4 <__adddf3>
 8006d38:	4622      	mov	r2, r4
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	f7f9 fc00 	bl	8000540 <__aeabi_dmul>
 8006d40:	a359      	add	r3, pc, #356	@ (adr r3, 8006ea8 <__ieee754_pow+0xa58>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fa43 	bl	80001d0 <__aeabi_dsub>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	f7f9 fbf7 	bl	8000540 <__aeabi_dmul>
 8006d52:	a357      	add	r3, pc, #348	@ (adr r3, 8006eb0 <__ieee754_pow+0xa60>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fa3c 	bl	80001d4 <__adddf3>
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	462b      	mov	r3, r5
 8006d60:	f7f9 fbee 	bl	8000540 <__aeabi_dmul>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 fa30 	bl	80001d0 <__aeabi_dsub>
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	f7f9 fbe0 	bl	8000540 <__aeabi_dmul>
 8006d80:	2200      	movs	r2, #0
 8006d82:	e9cd 0100 	strd	r0, r1, [sp]
 8006d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fa1f 	bl	80001d0 <__aeabi_dsub>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d9a:	f7f9 fcfb 	bl	8000794 <__aeabi_ddiv>
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	463b      	mov	r3, r7
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	f7f9 fbc9 	bl	8000540 <__aeabi_dmul>
 8006dae:	4632      	mov	r2, r6
 8006db0:	463b      	mov	r3, r7
 8006db2:	f7f9 fa0f 	bl	80001d4 <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7f9 fa07 	bl	80001d0 <__aeabi_dsub>
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	f7f9 fa03 	bl	80001d0 <__aeabi_dsub>
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4602      	mov	r2, r0
 8006dce:	493b      	ldr	r1, [pc, #236]	@ (8006ebc <__ieee754_pow+0xa6c>)
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	f7f9 f9fd 	bl	80001d0 <__aeabi_dsub>
 8006dd6:	ec41 0b10 	vmov	d0, r0, r1
 8006dda:	ee10 3a90 	vmov	r3, s1
 8006dde:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006de6:	da30      	bge.n	8006e4a <__ieee754_pow+0x9fa>
 8006de8:	4650      	mov	r0, sl
 8006dea:	f000 f87d 	bl	8006ee8 <scalbn>
 8006dee:	ec51 0b10 	vmov	r0, r1, d0
 8006df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df6:	f7ff bbd2 	b.w	800659e <__ieee754_pow+0x14e>
 8006dfa:	4c31      	ldr	r4, [pc, #196]	@ (8006ec0 <__ieee754_pow+0xa70>)
 8006dfc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d91a      	bls.n	8006e3a <__ieee754_pow+0x9ea>
 8006e04:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec4 <__ieee754_pow+0xa74>)
 8006e06:	440b      	add	r3, r1
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	d009      	beq.n	8006e20 <__ieee754_pow+0x9d0>
 8006e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2300      	movs	r3, #0
 8006e14:	f7f9 fe06 	bl	8000a24 <__aeabi_dcmplt>
 8006e18:	3800      	subs	r0, #0
 8006e1a:	bf18      	it	ne
 8006e1c:	2001      	movne	r0, #1
 8006e1e:	e42b      	b.n	8006678 <__ieee754_pow+0x228>
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	f7f9 f9d4 	bl	80001d0 <__aeabi_dsub>
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	f7f9 fe0e 	bl	8000a4c <__aeabi_dcmpge>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1eb      	bne.n	8006e0c <__ieee754_pow+0x9bc>
 8006e34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006ed4 <__ieee754_pow+0xa84>
 8006e38:	e6f7      	b.n	8006c2a <__ieee754_pow+0x7da>
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	4b22      	ldr	r3, [pc, #136]	@ (8006ec8 <__ieee754_pow+0xa78>)
 8006e3e:	459a      	cmp	sl, r3
 8006e40:	f63f aef3 	bhi.w	8006c2a <__ieee754_pow+0x7da>
 8006e44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006e48:	e715      	b.n	8006c76 <__ieee754_pow+0x826>
 8006e4a:	ec51 0b10 	vmov	r0, r1, d0
 8006e4e:	4619      	mov	r1, r3
 8006e50:	e7cf      	b.n	8006df2 <__ieee754_pow+0x9a2>
 8006e52:	491a      	ldr	r1, [pc, #104]	@ (8006ebc <__ieee754_pow+0xa6c>)
 8006e54:	2000      	movs	r0, #0
 8006e56:	f7ff bb18 	b.w	800648a <__ieee754_pow+0x3a>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	f7ff bb14 	b.w	800648a <__ieee754_pow+0x3a>
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7ff bb10 	b.w	800648a <__ieee754_pow+0x3a>
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f7ff bb5e 	b.w	800652c <__ieee754_pow+0xdc>
 8006e70:	2400      	movs	r4, #0
 8006e72:	f7ff bb49 	b.w	8006508 <__ieee754_pow+0xb8>
 8006e76:	bf00      	nop
 8006e78:	00000000 	.word	0x00000000
 8006e7c:	3fe62e43 	.word	0x3fe62e43
 8006e80:	fefa39ef 	.word	0xfefa39ef
 8006e84:	3fe62e42 	.word	0x3fe62e42
 8006e88:	0ca86c39 	.word	0x0ca86c39
 8006e8c:	be205c61 	.word	0xbe205c61
 8006e90:	72bea4d0 	.word	0x72bea4d0
 8006e94:	3e663769 	.word	0x3e663769
 8006e98:	c5d26bf1 	.word	0xc5d26bf1
 8006e9c:	3ebbbd41 	.word	0x3ebbbd41
 8006ea0:	af25de2c 	.word	0xaf25de2c
 8006ea4:	3f11566a 	.word	0x3f11566a
 8006ea8:	16bebd93 	.word	0x16bebd93
 8006eac:	3f66c16c 	.word	0x3f66c16c
 8006eb0:	5555553e 	.word	0x5555553e
 8006eb4:	3fc55555 	.word	0x3fc55555
 8006eb8:	fff00000 	.word	0xfff00000
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	4090cbff 	.word	0x4090cbff
 8006ec4:	3f6f3400 	.word	0x3f6f3400
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	652b82fe 	.word	0x652b82fe
 8006ed0:	3c971547 	.word	0x3c971547
 8006ed4:	4090cc00 	.word	0x4090cc00

08006ed8 <fabs>:
 8006ed8:	ec51 0b10 	vmov	r0, r1, d0
 8006edc:	4602      	mov	r2, r0
 8006ede:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ee2:	ec43 2b10 	vmov	d0, r2, r3
 8006ee6:	4770      	bx	lr

08006ee8 <scalbn>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	ec55 4b10 	vmov	r4, r5, d0
 8006eee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	b991      	cbnz	r1, 8006f1e <scalbn+0x36>
 8006ef8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006efc:	4323      	orrs	r3, r4
 8006efe:	d03d      	beq.n	8006f7c <scalbn+0x94>
 8006f00:	4b35      	ldr	r3, [pc, #212]	@ (8006fd8 <scalbn+0xf0>)
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	2200      	movs	r2, #0
 8006f08:	f7f9 fb1a 	bl	8000540 <__aeabi_dmul>
 8006f0c:	4b33      	ldr	r3, [pc, #204]	@ (8006fdc <scalbn+0xf4>)
 8006f0e:	429e      	cmp	r6, r3
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	da0f      	bge.n	8006f36 <scalbn+0x4e>
 8006f16:	a328      	add	r3, pc, #160	@ (adr r3, 8006fb8 <scalbn+0xd0>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	e01e      	b.n	8006f5c <scalbn+0x74>
 8006f1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006f22:	4291      	cmp	r1, r2
 8006f24:	d10b      	bne.n	8006f3e <scalbn+0x56>
 8006f26:	4622      	mov	r2, r4
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 f952 	bl	80001d4 <__adddf3>
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	e022      	b.n	8006f7c <scalbn+0x94>
 8006f36:	460b      	mov	r3, r1
 8006f38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f3c:	3936      	subs	r1, #54	@ 0x36
 8006f3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006f42:	4296      	cmp	r6, r2
 8006f44:	dd0d      	ble.n	8006f62 <scalbn+0x7a>
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	a11d      	add	r1, pc, #116	@ (adr r1, 8006fc0 <scalbn+0xd8>)
 8006f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f4e:	da02      	bge.n	8006f56 <scalbn+0x6e>
 8006f50:	a11d      	add	r1, pc, #116	@ (adr r1, 8006fc8 <scalbn+0xe0>)
 8006f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f56:	a31a      	add	r3, pc, #104	@ (adr r3, 8006fc0 <scalbn+0xd8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 faf0 	bl	8000540 <__aeabi_dmul>
 8006f60:	e7e6      	b.n	8006f30 <scalbn+0x48>
 8006f62:	1872      	adds	r2, r6, r1
 8006f64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006f68:	428a      	cmp	r2, r1
 8006f6a:	dcec      	bgt.n	8006f46 <scalbn+0x5e>
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	dd08      	ble.n	8006f82 <scalbn+0x9a>
 8006f70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006f74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006f78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f7c:	ec45 4b10 	vmov	d0, r4, r5
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006f86:	da08      	bge.n	8006f9a <scalbn+0xb2>
 8006f88:	2d00      	cmp	r5, #0
 8006f8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006fb8 <scalbn+0xd0>)
 8006f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f90:	dac1      	bge.n	8006f16 <scalbn+0x2e>
 8006f92:	a10f      	add	r1, pc, #60	@ (adr r1, 8006fd0 <scalbn+0xe8>)
 8006f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f98:	e7bd      	b.n	8006f16 <scalbn+0x2e>
 8006f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006f9e:	3236      	adds	r2, #54	@ 0x36
 8006fa0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006fa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <scalbn+0xf8>)
 8006fac:	4629      	mov	r1, r5
 8006fae:	2200      	movs	r2, #0
 8006fb0:	e7d4      	b.n	8006f5c <scalbn+0x74>
 8006fb2:	bf00      	nop
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	c2f8f359 	.word	0xc2f8f359
 8006fbc:	01a56e1f 	.word	0x01a56e1f
 8006fc0:	8800759c 	.word	0x8800759c
 8006fc4:	7e37e43c 	.word	0x7e37e43c
 8006fc8:	8800759c 	.word	0x8800759c
 8006fcc:	fe37e43c 	.word	0xfe37e43c
 8006fd0:	c2f8f359 	.word	0xc2f8f359
 8006fd4:	81a56e1f 	.word	0x81a56e1f
 8006fd8:	43500000 	.word	0x43500000
 8006fdc:	ffff3cb0 	.word	0xffff3cb0
 8006fe0:	3c900000 	.word	0x3c900000

08006fe4 <with_errno>:
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	ed2d 8b02 	vpush	{d8}
 8006fea:	eeb0 8a40 	vmov.f32	s16, s0
 8006fee:	eef0 8a60 	vmov.f32	s17, s1
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	f7ff f984 	bl	8006300 <__errno>
 8006ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8006ffc:	eef0 0a68 	vmov.f32	s1, s17
 8007000:	ecbd 8b02 	vpop	{d8}
 8007004:	6004      	str	r4, [r0, #0]
 8007006:	bd10      	pop	{r4, pc}

08007008 <xflow>:
 8007008:	4603      	mov	r3, r0
 800700a:	b507      	push	{r0, r1, r2, lr}
 800700c:	ec51 0b10 	vmov	r0, r1, d0
 8007010:	b183      	cbz	r3, 8007034 <xflow+0x2c>
 8007012:	4602      	mov	r2, r0
 8007014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007018:	e9cd 2300 	strd	r2, r3, [sp]
 800701c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007020:	f7f9 fa8e 	bl	8000540 <__aeabi_dmul>
 8007024:	ec41 0b10 	vmov	d0, r0, r1
 8007028:	2022      	movs	r0, #34	@ 0x22
 800702a:	b003      	add	sp, #12
 800702c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007030:	f7ff bfd8 	b.w	8006fe4 <with_errno>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	e7ee      	b.n	8007018 <xflow+0x10>
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <__math_uflow>:
 8007040:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007048 <__math_uflow+0x8>
 8007044:	f7ff bfe0 	b.w	8007008 <xflow>
 8007048:	00000000 	.word	0x00000000
 800704c:	10000000 	.word	0x10000000

08007050 <__math_oflow>:
 8007050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007058 <__math_oflow+0x8>
 8007054:	f7ff bfd8 	b.w	8007008 <xflow>
 8007058:	00000000 	.word	0x00000000
 800705c:	70000000 	.word	0x70000000

08007060 <__ieee754_sqrt>:
 8007060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4a68      	ldr	r2, [pc, #416]	@ (8007208 <__ieee754_sqrt+0x1a8>)
 8007066:	ec55 4b10 	vmov	r4, r5, d0
 800706a:	43aa      	bics	r2, r5
 800706c:	462b      	mov	r3, r5
 800706e:	4621      	mov	r1, r4
 8007070:	d110      	bne.n	8007094 <__ieee754_sqrt+0x34>
 8007072:	4622      	mov	r2, r4
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fa62 	bl	8000540 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f8a6 	bl	80001d4 <__adddf3>
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	ec45 4b10 	vmov	d0, r4, r5
 8007090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007094:	2d00      	cmp	r5, #0
 8007096:	dc0e      	bgt.n	80070b6 <__ieee754_sqrt+0x56>
 8007098:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800709c:	4322      	orrs	r2, r4
 800709e:	d0f5      	beq.n	800708c <__ieee754_sqrt+0x2c>
 80070a0:	b19d      	cbz	r5, 80070ca <__ieee754_sqrt+0x6a>
 80070a2:	4622      	mov	r2, r4
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 f892 	bl	80001d0 <__aeabi_dsub>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	f7f9 fb70 	bl	8000794 <__aeabi_ddiv>
 80070b4:	e7e8      	b.n	8007088 <__ieee754_sqrt+0x28>
 80070b6:	152a      	asrs	r2, r5, #20
 80070b8:	d115      	bne.n	80070e6 <__ieee754_sqrt+0x86>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e009      	b.n	80070d2 <__ieee754_sqrt+0x72>
 80070be:	0acb      	lsrs	r3, r1, #11
 80070c0:	3a15      	subs	r2, #21
 80070c2:	0549      	lsls	r1, r1, #21
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0fa      	beq.n	80070be <__ieee754_sqrt+0x5e>
 80070c8:	e7f7      	b.n	80070ba <__ieee754_sqrt+0x5a>
 80070ca:	462a      	mov	r2, r5
 80070cc:	e7fa      	b.n	80070c4 <__ieee754_sqrt+0x64>
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	3001      	adds	r0, #1
 80070d2:	02dc      	lsls	r4, r3, #11
 80070d4:	d5fb      	bpl.n	80070ce <__ieee754_sqrt+0x6e>
 80070d6:	1e44      	subs	r4, r0, #1
 80070d8:	1b12      	subs	r2, r2, r4
 80070da:	f1c0 0420 	rsb	r4, r0, #32
 80070de:	fa21 f404 	lsr.w	r4, r1, r4
 80070e2:	4323      	orrs	r3, r4
 80070e4:	4081      	lsls	r1, r0
 80070e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80070ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070f2:	07d2      	lsls	r2, r2, #31
 80070f4:	bf5c      	itt	pl
 80070f6:	005b      	lslpl	r3, r3, #1
 80070f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80070fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007100:	bf58      	it	pl
 8007102:	0049      	lslpl	r1, r1, #1
 8007104:	2600      	movs	r6, #0
 8007106:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800710a:	106d      	asrs	r5, r5, #1
 800710c:	0049      	lsls	r1, r1, #1
 800710e:	2016      	movs	r0, #22
 8007110:	4632      	mov	r2, r6
 8007112:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007116:	1917      	adds	r7, r2, r4
 8007118:	429f      	cmp	r7, r3
 800711a:	bfde      	ittt	le
 800711c:	193a      	addle	r2, r7, r4
 800711e:	1bdb      	suble	r3, r3, r7
 8007120:	1936      	addle	r6, r6, r4
 8007122:	0fcf      	lsrs	r7, r1, #31
 8007124:	3801      	subs	r0, #1
 8007126:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800712a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800712e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007132:	d1f0      	bne.n	8007116 <__ieee754_sqrt+0xb6>
 8007134:	4604      	mov	r4, r0
 8007136:	2720      	movs	r7, #32
 8007138:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800713c:	429a      	cmp	r2, r3
 800713e:	eb00 0e0c 	add.w	lr, r0, ip
 8007142:	db02      	blt.n	800714a <__ieee754_sqrt+0xea>
 8007144:	d113      	bne.n	800716e <__ieee754_sqrt+0x10e>
 8007146:	458e      	cmp	lr, r1
 8007148:	d811      	bhi.n	800716e <__ieee754_sqrt+0x10e>
 800714a:	f1be 0f00 	cmp.w	lr, #0
 800714e:	eb0e 000c 	add.w	r0, lr, ip
 8007152:	da42      	bge.n	80071da <__ieee754_sqrt+0x17a>
 8007154:	2800      	cmp	r0, #0
 8007156:	db40      	blt.n	80071da <__ieee754_sqrt+0x17a>
 8007158:	f102 0801 	add.w	r8, r2, #1
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	458e      	cmp	lr, r1
 8007160:	bf88      	it	hi
 8007162:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007166:	eba1 010e 	sub.w	r1, r1, lr
 800716a:	4464      	add	r4, ip
 800716c:	4642      	mov	r2, r8
 800716e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007172:	3f01      	subs	r7, #1
 8007174:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007178:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800717c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007180:	d1dc      	bne.n	800713c <__ieee754_sqrt+0xdc>
 8007182:	4319      	orrs	r1, r3
 8007184:	d01b      	beq.n	80071be <__ieee754_sqrt+0x15e>
 8007186:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800720c <__ieee754_sqrt+0x1ac>
 800718a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007210 <__ieee754_sqrt+0x1b0>
 800718e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007192:	e9db 2300 	ldrd	r2, r3, [fp]
 8007196:	f7f9 f81b 	bl	80001d0 <__aeabi_dsub>
 800719a:	e9da 8900 	ldrd	r8, r9, [sl]
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4640      	mov	r0, r8
 80071a4:	4649      	mov	r1, r9
 80071a6:	f7f9 fc47 	bl	8000a38 <__aeabi_dcmple>
 80071aa:	b140      	cbz	r0, 80071be <__ieee754_sqrt+0x15e>
 80071ac:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80071b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80071b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80071b8:	d111      	bne.n	80071de <__ieee754_sqrt+0x17e>
 80071ba:	3601      	adds	r6, #1
 80071bc:	463c      	mov	r4, r7
 80071be:	1072      	asrs	r2, r6, #1
 80071c0:	0863      	lsrs	r3, r4, #1
 80071c2:	07f1      	lsls	r1, r6, #31
 80071c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80071c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80071cc:	bf48      	it	mi
 80071ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80071d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80071d6:	4618      	mov	r0, r3
 80071d8:	e756      	b.n	8007088 <__ieee754_sqrt+0x28>
 80071da:	4690      	mov	r8, r2
 80071dc:	e7be      	b.n	800715c <__ieee754_sqrt+0xfc>
 80071de:	f7f8 fff9 	bl	80001d4 <__adddf3>
 80071e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4640      	mov	r0, r8
 80071ec:	4649      	mov	r1, r9
 80071ee:	f7f9 fc19 	bl	8000a24 <__aeabi_dcmplt>
 80071f2:	b120      	cbz	r0, 80071fe <__ieee754_sqrt+0x19e>
 80071f4:	1ca0      	adds	r0, r4, #2
 80071f6:	bf08      	it	eq
 80071f8:	3601      	addeq	r6, #1
 80071fa:	3402      	adds	r4, #2
 80071fc:	e7df      	b.n	80071be <__ieee754_sqrt+0x15e>
 80071fe:	1c63      	adds	r3, r4, #1
 8007200:	f023 0401 	bic.w	r4, r3, #1
 8007204:	e7db      	b.n	80071be <__ieee754_sqrt+0x15e>
 8007206:	bf00      	nop
 8007208:	7ff00000 	.word	0x7ff00000
 800720c:	20000098 	.word	0x20000098
 8007210:	20000090 	.word	0x20000090

08007214 <_init>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr

08007220 <_fini>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	bf00      	nop
 8007224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007226:	bc08      	pop	{r3}
 8007228:	469e      	mov	lr, r3
 800722a:	4770      	bx	lr
